/**
 * generated by Xtext 2.25.0
 */
package com.intuit.dsl.expression.impl;

import com.intuit.dsl.expression.Expression;
import com.intuit.dsl.expression.ExpressionPackage;
import com.intuit.dsl.expression.MapFunc;
import com.intuit.dsl.expression.MapStatement;
import com.intuit.dsl.expression.Range;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Map Func</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.intuit.dsl.expression.impl.MapFuncImpl#getExp <em>Exp</em>}</li>
 *   <li>{@link com.intuit.dsl.expression.impl.MapFuncImpl#getRange <em>Range</em>}</li>
 *   <li>{@link com.intuit.dsl.expression.impl.MapFuncImpl#getAliasKey <em>Alias Key</em>}</li>
 *   <li>{@link com.intuit.dsl.expression.impl.MapFuncImpl#getReturnexp <em>Returnexp</em>}</li>
 *   <li>{@link com.intuit.dsl.expression.impl.MapFuncImpl#getStatement <em>Statement</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MapFuncImpl extends CollectionFunctionCallImpl implements MapFunc
{
  /**
   * The cached value of the '{@link #getExp() <em>Exp</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExp()
   * @generated
   * @ordered
   */
  protected Expression exp;

  /**
   * The cached value of the '{@link #getRange() <em>Range</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRange()
   * @generated
   * @ordered
   */
  protected Range range;

  /**
   * The default value of the '{@link #getAliasKey() <em>Alias Key</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAliasKey()
   * @generated
   * @ordered
   */
  protected static final String ALIAS_KEY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAliasKey() <em>Alias Key</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAliasKey()
   * @generated
   * @ordered
   */
  protected String aliasKey = ALIAS_KEY_EDEFAULT;

  /**
   * The cached value of the '{@link #getReturnexp() <em>Returnexp</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReturnexp()
   * @generated
   * @ordered
   */
  protected Expression returnexp;

  /**
   * The cached value of the '{@link #getStatement() <em>Statement</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatement()
   * @generated
   * @ordered
   */
  protected EList<MapStatement> statement;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MapFuncImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ExpressionPackage.Literals.MAP_FUNC;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getExp()
  {
    return exp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExp(Expression newExp, NotificationChain msgs)
  {
    Expression oldExp = exp;
    exp = newExp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ExpressionPackage.MAP_FUNC__EXP, oldExp, newExp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExp(Expression newExp)
  {
    if (newExp != exp)
    {
      NotificationChain msgs = null;
      if (exp != null)
        msgs = ((InternalEObject)exp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ExpressionPackage.MAP_FUNC__EXP, null, msgs);
      if (newExp != null)
        msgs = ((InternalEObject)newExp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ExpressionPackage.MAP_FUNC__EXP, null, msgs);
      msgs = basicSetExp(newExp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ExpressionPackage.MAP_FUNC__EXP, newExp, newExp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Range getRange()
  {
    return range;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRange(Range newRange, NotificationChain msgs)
  {
    Range oldRange = range;
    range = newRange;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ExpressionPackage.MAP_FUNC__RANGE, oldRange, newRange);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRange(Range newRange)
  {
    if (newRange != range)
    {
      NotificationChain msgs = null;
      if (range != null)
        msgs = ((InternalEObject)range).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ExpressionPackage.MAP_FUNC__RANGE, null, msgs);
      if (newRange != null)
        msgs = ((InternalEObject)newRange).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ExpressionPackage.MAP_FUNC__RANGE, null, msgs);
      msgs = basicSetRange(newRange, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ExpressionPackage.MAP_FUNC__RANGE, newRange, newRange));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getAliasKey()
  {
    return aliasKey;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAliasKey(String newAliasKey)
  {
    String oldAliasKey = aliasKey;
    aliasKey = newAliasKey;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ExpressionPackage.MAP_FUNC__ALIAS_KEY, oldAliasKey, aliasKey));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getReturnexp()
  {
    return returnexp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetReturnexp(Expression newReturnexp, NotificationChain msgs)
  {
    Expression oldReturnexp = returnexp;
    returnexp = newReturnexp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ExpressionPackage.MAP_FUNC__RETURNEXP, oldReturnexp, newReturnexp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setReturnexp(Expression newReturnexp)
  {
    if (newReturnexp != returnexp)
    {
      NotificationChain msgs = null;
      if (returnexp != null)
        msgs = ((InternalEObject)returnexp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ExpressionPackage.MAP_FUNC__RETURNEXP, null, msgs);
      if (newReturnexp != null)
        msgs = ((InternalEObject)newReturnexp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ExpressionPackage.MAP_FUNC__RETURNEXP, null, msgs);
      msgs = basicSetReturnexp(newReturnexp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ExpressionPackage.MAP_FUNC__RETURNEXP, newReturnexp, newReturnexp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<MapStatement> getStatement()
  {
    if (statement == null)
    {
      statement = new EObjectContainmentEList<MapStatement>(MapStatement.class, this, ExpressionPackage.MAP_FUNC__STATEMENT);
    }
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ExpressionPackage.MAP_FUNC__EXP:
        return basicSetExp(null, msgs);
      case ExpressionPackage.MAP_FUNC__RANGE:
        return basicSetRange(null, msgs);
      case ExpressionPackage.MAP_FUNC__RETURNEXP:
        return basicSetReturnexp(null, msgs);
      case ExpressionPackage.MAP_FUNC__STATEMENT:
        return ((InternalEList<?>)getStatement()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ExpressionPackage.MAP_FUNC__EXP:
        return getExp();
      case ExpressionPackage.MAP_FUNC__RANGE:
        return getRange();
      case ExpressionPackage.MAP_FUNC__ALIAS_KEY:
        return getAliasKey();
      case ExpressionPackage.MAP_FUNC__RETURNEXP:
        return getReturnexp();
      case ExpressionPackage.MAP_FUNC__STATEMENT:
        return getStatement();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ExpressionPackage.MAP_FUNC__EXP:
        setExp((Expression)newValue);
        return;
      case ExpressionPackage.MAP_FUNC__RANGE:
        setRange((Range)newValue);
        return;
      case ExpressionPackage.MAP_FUNC__ALIAS_KEY:
        setAliasKey((String)newValue);
        return;
      case ExpressionPackage.MAP_FUNC__RETURNEXP:
        setReturnexp((Expression)newValue);
        return;
      case ExpressionPackage.MAP_FUNC__STATEMENT:
        getStatement().clear();
        getStatement().addAll((Collection<? extends MapStatement>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ExpressionPackage.MAP_FUNC__EXP:
        setExp((Expression)null);
        return;
      case ExpressionPackage.MAP_FUNC__RANGE:
        setRange((Range)null);
        return;
      case ExpressionPackage.MAP_FUNC__ALIAS_KEY:
        setAliasKey(ALIAS_KEY_EDEFAULT);
        return;
      case ExpressionPackage.MAP_FUNC__RETURNEXP:
        setReturnexp((Expression)null);
        return;
      case ExpressionPackage.MAP_FUNC__STATEMENT:
        getStatement().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ExpressionPackage.MAP_FUNC__EXP:
        return exp != null;
      case ExpressionPackage.MAP_FUNC__RANGE:
        return range != null;
      case ExpressionPackage.MAP_FUNC__ALIAS_KEY:
        return ALIAS_KEY_EDEFAULT == null ? aliasKey != null : !ALIAS_KEY_EDEFAULT.equals(aliasKey);
      case ExpressionPackage.MAP_FUNC__RETURNEXP:
        return returnexp != null;
      case ExpressionPackage.MAP_FUNC__STATEMENT:
        return statement != null && !statement.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (aliasKey: ");
    result.append(aliasKey);
    result.append(')');
    return result.toString();
  }

} //MapFuncImpl
