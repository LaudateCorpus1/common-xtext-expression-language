/*
 * generated by Xtext 2.25.0
 */
grammar InternalExpression;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package com.intuit.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.intuit.dsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.intuit.dsl.services.ExpressionGrammarAccess;

}

@parser::members {

 	private ExpressionGrammarAccess grammarAccess;

    public InternalExpressionParser(TokenStream input, ExpressionGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Expression";
   	}

   	@Override
   	protected ExpressionGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getExpressionAccess().getBooleanExpressionParserRuleCall());
	}
	this_BooleanExpression_0=ruleBooleanExpression
	{
		$current = $this_BooleanExpression_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanExpressionRule()); }
	iv_ruleBooleanExpression=ruleBooleanExpression
	{ $current=$iv_ruleBooleanExpression.current; }
	EOF;

// Rule BooleanExpression
ruleBooleanExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBooleanExpressionAccess().getComparisonParserRuleCall_0());
		}
		this_Comparison_0=ruleComparison
		{
			$current = $this_Comparison_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getBooleanExpressionAccess().getBooleanExpressionLeftAction_1_0_0(),
							$current);
					}
				)
				(
					(
						(
							lv_op_2_1='||'
							{
								newLeafNode(lv_op_2_1, grammarAccess.getBooleanExpressionAccess().getOpVerticalLineVerticalLineKeyword_1_0_1_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getBooleanExpressionRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_1, null);
							}
							    |
							lv_op_2_2='&&'
							{
								newLeafNode(lv_op_2_2, grammarAccess.getBooleanExpressionAccess().getOpAmpersandAmpersandKeyword_1_0_1_0_1());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getBooleanExpressionRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_2, null);
							}
							    |
							lv_op_2_3='and'
							{
								newLeafNode(lv_op_2_3, grammarAccess.getBooleanExpressionAccess().getOpAndKeyword_1_0_1_0_2());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getBooleanExpressionRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_3, null);
							}
							    |
							lv_op_2_4='or'
							{
								newLeafNode(lv_op_2_4, grammarAccess.getBooleanExpressionAccess().getOpOrKeyword_1_0_1_0_3());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getBooleanExpressionRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_4, null);
							}
						)
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getBooleanExpressionAccess().getRightComparisonParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleComparison
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBooleanExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"com.intuit.dsl.Expression.Comparison");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleComparison
entryRuleComparison returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparisonRule()); }
	iv_ruleComparison=ruleComparison
	{ $current=$iv_ruleComparison.current; }
	EOF;

// Rule Comparison
ruleComparison returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getComparisonAccess().getMembershipParserRuleCall_0());
		}
		this_Membership_0=ruleMembership
		{
			$current = $this_Membership_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getComparisonAccess().getComparisonLeftAction_1_0_0(),
							$current);
					}
				)
				(
					(
						(
							lv_op_2_1='<'
							{
								newLeafNode(lv_op_2_1, grammarAccess.getComparisonAccess().getOpLessThanSignKeyword_1_0_1_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getComparisonRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_1, null);
							}
							    |
							lv_op_2_2='>'
							{
								newLeafNode(lv_op_2_2, grammarAccess.getComparisonAccess().getOpGreaterThanSignKeyword_1_0_1_0_1());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getComparisonRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_2, null);
							}
							    |
							lv_op_2_3='<='
							{
								newLeafNode(lv_op_2_3, grammarAccess.getComparisonAccess().getOpLessThanSignEqualsSignKeyword_1_0_1_0_2());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getComparisonRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_3, null);
							}
							    |
							lv_op_2_4='>='
							{
								newLeafNode(lv_op_2_4, grammarAccess.getComparisonAccess().getOpGreaterThanSignEqualsSignKeyword_1_0_1_0_3());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getComparisonRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_4, null);
							}
						)
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getComparisonAccess().getRightMembershipParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleMembership
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComparisonRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"com.intuit.dsl.Expression.Membership");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMembership
entryRuleMembership returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMembershipRule()); }
	iv_ruleMembership=ruleMembership
	{ $current=$iv_ruleMembership.current; }
	EOF;

// Rule Membership
ruleMembership returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMembershipAccess().getEqualsParserRuleCall_0());
		}
		this_Equals_0=ruleEquals
		{
			$current = $this_Equals_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getMembershipAccess().getMembershipLeftAction_1_0_0(),
							$current);
					}
				)
				(
					(
						(
							lv_op_2_1='in'
							{
								newLeafNode(lv_op_2_1, grammarAccess.getMembershipAccess().getOpInKeyword_1_0_1_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getMembershipRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_1, null);
							}
							    |
							lv_op_2_2='not_in'
							{
								newLeafNode(lv_op_2_2, grammarAccess.getMembershipAccess().getOpNot_inKeyword_1_0_1_0_1());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getMembershipRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_2, null);
							}
						)
					)
				)
			)
			otherlv_3='['
			{
				newLeafNode(otherlv_3, grammarAccess.getMembershipAccess().getLeftSquareBracketKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMembershipAccess().getRightExpressionParserRuleCall_1_2_0());
					}
					lv_right_4_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMembershipRule());
						}
						add(
							$current,
							"right",
							lv_right_4_0,
							"com.intuit.dsl.Expression.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getMembershipAccess().getCommaKeyword_1_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getMembershipAccess().getRightExpressionParserRuleCall_1_3_1_0());
						}
						lv_right_6_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMembershipRule());
							}
							add(
								$current,
								"right",
								lv_right_6_0,
								"com.intuit.dsl.Expression.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_7=']'
			{
				newLeafNode(otherlv_7, grammarAccess.getMembershipAccess().getRightSquareBracketKeyword_1_4());
			}
		)*
	)
;

// Entry rule entryRuleEquals
entryRuleEquals returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEqualsRule()); }
	iv_ruleEquals=ruleEquals
	{ $current=$iv_ruleEquals.current; }
	EOF;

// Rule Equals
ruleEquals returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEqualsAccess().getAdditionParserRuleCall_0());
		}
		this_Addition_0=ruleAddition
		{
			$current = $this_Addition_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getEqualsAccess().getEqualsLeftAction_1_0_0(),
							$current);
					}
				)
				(
					(
						(
							lv_op_2_1='=='
							{
								newLeafNode(lv_op_2_1, grammarAccess.getEqualsAccess().getOpEqualsSignEqualsSignKeyword_1_0_1_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getEqualsRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_1, null);
							}
							    |
							lv_op_2_2='!='
							{
								newLeafNode(lv_op_2_2, grammarAccess.getEqualsAccess().getOpExclamationMarkEqualsSignKeyword_1_0_1_0_1());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getEqualsRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_2, null);
							}
							    |
							lv_op_2_3='=~'
							{
								newLeafNode(lv_op_2_3, grammarAccess.getEqualsAccess().getOpEqualsSignTildeKeyword_1_0_1_0_2());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getEqualsRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_3, null);
							}
							    |
							lv_op_2_4='!~'
							{
								newLeafNode(lv_op_2_4, grammarAccess.getEqualsAccess().getOpExclamationMarkTildeKeyword_1_0_1_0_3());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getEqualsRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_4, null);
							}
							    |
							lv_op_2_5='is'
							{
								newLeafNode(lv_op_2_5, grammarAccess.getEqualsAccess().getOpIsKeyword_1_0_1_0_4());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getEqualsRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_5, null);
							}
						)
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEqualsAccess().getRightAdditionParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleAddition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEqualsRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"com.intuit.dsl.Expression.Addition");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAddition
entryRuleAddition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdditionRule()); }
	iv_ruleAddition=ruleAddition
	{ $current=$iv_ruleAddition.current; }
	EOF;

// Rule Addition
ruleAddition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0());
		}
		this_Multiplication_0=ruleMultiplication
		{
			$current = $this_Multiplication_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
						(
						)
						'+'
					)
					    |
					(
						(
						)
						'-'
					)
				)
				)=>
				(
					(
						(
							{
								$current = forceCreateModelElementAndSet(
									grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0_0(),
									$current);
							}
						)
						otherlv_2='+'
						{
							newLeafNode(otherlv_2, grammarAccess.getAdditionAccess().getPlusSignKeyword_1_0_0_0_1());
						}
					)
					    |
					(
						(
							{
								$current = forceCreateModelElementAndSet(
									grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_0_1_0(),
									$current);
							}
						)
						otherlv_4='-'
						{
							newLeafNode(otherlv_4, grammarAccess.getAdditionAccess().getHyphenMinusKeyword_1_0_0_1_1());
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_1_0());
					}
					lv_right_5_0=ruleMultiplication
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdditionRule());
						}
						set(
							$current,
							"right",
							lv_right_5_0,
							"com.intuit.dsl.Expression.Multiplication");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMultiplication
entryRuleMultiplication returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicationRule()); }
	iv_ruleMultiplication=ruleMultiplication
	{ $current=$iv_ruleMultiplication.current; }
	EOF;

// Rule Multiplication
ruleMultiplication returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultiplicationAccess().getPrefixedParserRuleCall_0());
		}
		this_Prefixed_0=rulePrefixed
		{
			$current = $this_Prefixed_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getMultiplicationAccess().getMultiOrDivOrModLeftAction_1_0_0(),
							$current);
					}
				)
				(
					(
						(
							lv_op_2_1='*'
							{
								newLeafNode(lv_op_2_1, grammarAccess.getMultiplicationAccess().getOpAsteriskKeyword_1_0_1_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getMultiplicationRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_1, null);
							}
							    |
							lv_op_2_2='/'
							{
								newLeafNode(lv_op_2_2, grammarAccess.getMultiplicationAccess().getOpSolidusKeyword_1_0_1_0_1());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getMultiplicationRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_2, null);
							}
							    |
							lv_op_2_3='%'
							{
								newLeafNode(lv_op_2_3, grammarAccess.getMultiplicationAccess().getOpPercentSignKeyword_1_0_1_0_2());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getMultiplicationRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_3, null);
							}
						)
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiplicationAccess().getRightPrefixedParserRuleCall_1_1_0());
					}
					lv_right_3_0=rulePrefixed
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplicationRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"com.intuit.dsl.Expression.Prefixed");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrefixed
entryRulePrefixed returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrefixedRule()); }
	iv_rulePrefixed=rulePrefixed
	{ $current=$iv_rulePrefixed.current; }
	EOF;

// Rule Prefixed
rulePrefixed returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrefixedAccess().getBooleanNegationAction_0_0(),
						$current);
				}
			)
			otherlv_1='!'
			{
				newLeafNode(otherlv_1, grammarAccess.getPrefixedAccess().getExclamationMarkKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrefixedAccess().getExpressionAtomicParserRuleCall_0_2_0());
					}
					lv_expression_2_0=ruleAtomic
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrefixedRule());
						}
						set(
							$current,
							"expression",
							lv_expression_2_0,
							"com.intuit.dsl.Expression.Atomic");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrefixedAccess().getArithmeticSignedAction_1_0(),
						$current);
				}
			)
			otherlv_4='-'
			{
				newLeafNode(otherlv_4, grammarAccess.getPrefixedAccess().getHyphenMinusKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrefixedAccess().getExpressionAtomicParserRuleCall_1_2_0());
					}
					lv_expression_5_0=ruleAtomic
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrefixedRule());
						}
						set(
							$current,
							"expression",
							lv_expression_5_0,
							"com.intuit.dsl.Expression.Atomic");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getPrefixedAccess().getAtomicParserRuleCall_2());
		}
		this_Atomic_6=ruleAtomic
		{
			$current = $this_Atomic_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAtomic
entryRuleAtomic returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomicRule()); }
	iv_ruleAtomic=ruleAtomic
	{ $current=$iv_ruleAtomic.current; }
	EOF;

// Rule Atomic
ruleAtomic returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAtomicAccess().getLiteralExpressionParserRuleCall_0());
		}
		this_LiteralExpression_0=ruleLiteralExpression
		{
			$current = $this_LiteralExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAtomicAccess().getTernaryExpressionParserRuleCall_1());
		}
		this_TernaryExpression_1=ruleTernaryExpression
		{
			$current = $this_TernaryExpression_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAtomicAccess().getArrayExpressionParserRuleCall_2());
		}
		this_ArrayExpression_2=ruleArrayExpression
		{
			$current = $this_ArrayExpression_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAtomicAccess().getParenthesizedExpressionParserRuleCall_3());
		}
		this_ParenthesizedExpression_3=ruleParenthesizedExpression
		{
			$current = $this_ParenthesizedExpression_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicAccess().getFunctionReferenceAction_4_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAtomicAccess().getRefFunctionParserRuleCall_4_1_0());
					}
					lv_ref_5_0=ruleFunction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAtomicRule());
						}
						set(
							$current,
							"ref",
							lv_ref_5_0,
							"com.intuit.dsl.Expression.Function");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicAccess().getVariableReferenceAction_5_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAtomicAccess().getRefVariableParserRuleCall_5_1_0());
					}
					lv_ref_7_0=ruleVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAtomicRule());
						}
						set(
							$current,
							"ref",
							lv_ref_7_0,
							"com.intuit.dsl.Expression.Variable");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicAccess().getPropertyExpresssionAction_6_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAtomicAccess().getRefPropertyParserRuleCall_6_1_0());
					}
					lv_ref_9_0=ruleProperty
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAtomicRule());
						}
						set(
							$current,
							"ref",
							lv_ref_9_0,
							"com.intuit.dsl.Expression.Property");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleLiteralExpression
entryRuleLiteralExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteralExpressionRule()); }
	iv_ruleLiteralExpression=ruleLiteralExpression
	{ $current=$iv_ruleLiteralExpression.current; }
	EOF;

// Rule LiteralExpression
ruleLiteralExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getLiteralExpressionAccess().getNumberLiteralAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getLiteralExpressionAccess().getValueNUMBERParserRuleCall_0_1_0());
					}
					lv_value_1_0=ruleNUMBER
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLiteralExpressionRule());
						}
						set(
							$current,
							"value",
							lv_value_1_0,
							"com.intuit.dsl.Expression.NUMBER");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getLiteralExpressionAccess().getStringLiteralAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_value_3_0=RULE_STRING
					{
						newLeafNode(lv_value_3_0, grammarAccess.getLiteralExpressionAccess().getValueSTRINGTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLiteralExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_3_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getLiteralExpressionAccess().getNullLiteralAction_2_0(),
						$current);
				}
			)
			(
				(
					lv_value_5_0='null'
					{
						newLeafNode(lv_value_5_0, grammarAccess.getLiteralExpressionAccess().getValueNullKeyword_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLiteralExpressionRule());
						}
						setWithLastConsumed($current, "value", lv_value_5_0, "null");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getLiteralExpressionAccess().getBooleanLiteralAction_3_0(),
						$current);
				}
			)
			(
				(
					(
						lv_value_7_1='true'
						{
							newLeafNode(lv_value_7_1, grammarAccess.getLiteralExpressionAccess().getValueTrueKeyword_3_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getLiteralExpressionRule());
							}
							setWithLastConsumed($current, "value", lv_value_7_1, null);
						}
						    |
						lv_value_7_2='false'
						{
							newLeafNode(lv_value_7_2, grammarAccess.getLiteralExpressionAccess().getValueFalseKeyword_3_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getLiteralExpressionRule());
							}
							setWithLastConsumed($current, "value", lv_value_7_2, null);
						}
					)
				)
			)
		)
	)
;

// Entry rule entryRuleTernaryExpression
entryRuleTernaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTernaryExpressionRule()); }
	iv_ruleTernaryExpression=ruleTernaryExpression
	{ $current=$iv_ruleTernaryExpression.current; }
	EOF;

// Rule TernaryExpression
ruleTernaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getTernaryExpressionAccess().getIfKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTernaryExpressionAccess().getExpressionBooleanExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleBooleanExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTernaryExpressionRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"com.intuit.dsl.Expression.BooleanExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='then'
		{
			newLeafNode(otherlv_2, grammarAccess.getTernaryExpressionAccess().getThenKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTernaryExpressionAccess().getTruevalueAtomicParserRuleCall_3_0());
				}
				lv_truevalue_3_0=ruleAtomic
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTernaryExpressionRule());
					}
					set(
						$current,
						"truevalue",
						lv_truevalue_3_0,
						"com.intuit.dsl.Expression.Atomic");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				('else')=>
				otherlv_4='else'
				{
					newLeafNode(otherlv_4, grammarAccess.getTernaryExpressionAccess().getElseKeyword_4_0());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getTernaryExpressionAccess().getFalsevalueAtomicParserRuleCall_4_1_0());
					}
					lv_falsevalue_5_0=ruleAtomic
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTernaryExpressionRule());
						}
						set(
							$current,
							"falsevalue",
							lv_falsevalue_5_0,
							"com.intuit.dsl.Expression.Atomic");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleArrayExpression
entryRuleArrayExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArrayExpressionRule()); }
	iv_ruleArrayExpression=ruleArrayExpression
	{ $current=$iv_ruleArrayExpression.current; }
	EOF;

// Rule ArrayExpression
ruleArrayExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getArrayExpressionAccess().getArrayExpressionAction_0(),
					$current);
			}
		)
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getArrayExpressionAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArrayExpressionAccess().getExpressionExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArrayExpressionRule());
					}
					add(
						$current,
						"expression",
						lv_expression_2_0,
						"com.intuit.dsl.Expression.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getArrayExpressionAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getArrayExpressionAccess().getExpressionExpressionParserRuleCall_3_1_0());
					}
					lv_expression_4_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArrayExpressionRule());
						}
						add(
							$current,
							"expression",
							lv_expression_4_0,
							"com.intuit.dsl.Expression.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5=']'
		{
			newLeafNode(otherlv_5, grammarAccess.getArrayExpressionAccess().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleParenthesizedExpression
entryRuleParenthesizedExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParenthesizedExpressionRule()); }
	iv_ruleParenthesizedExpression=ruleParenthesizedExpression
	{ $current=$iv_ruleParenthesizedExpression.current; }
	EOF;

// Rule ParenthesizedExpression
ruleParenthesizedExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getParenthesizedExpressionAccess().getLeftParenthesisKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getParenthesizedExpressionAccess().getExpressionParserRuleCall_1());
		}
		this_Expression_1=ruleExpression
		{
			$current = $this_Expression_1.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getParenthesizedExpressionAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	iv_ruleFunction=ruleFunction
	{ $current=$iv_ruleFunction.current; }
	EOF;

// Rule Function
ruleFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getCollectionFunctionParserRuleCall_0());
		}
		this_CollectionFunction_0=ruleCollectionFunction
		{
			$current = $this_CollectionFunction_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getJoinParserRuleCall_1());
		}
		this_Join_1=ruleJoin
		{
			$current = $this_Join_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getLengthParserRuleCall_2());
		}
		this_Length_2=ruleLength
		{
			$current = $this_Length_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getDateFormatParserRuleCall_3());
		}
		this_DateFormat_3=ruleDateFormat
		{
			$current = $this_DateFormat_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getDeleteParserRuleCall_4());
		}
		this_Delete_4=ruleDelete
		{
			$current = $this_Delete_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getContainsParserRuleCall_5());
		}
		this_Contains_5=ruleContains
		{
			$current = $this_Contains_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getDayDifferenceParserRuleCall_6());
		}
		this_DayDifference_6=ruleDayDifference
		{
			$current = $this_DayDifference_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getCurrentDateParserRuleCall_7());
		}
		this_CurrentDate_7=ruleCurrentDate
		{
			$current = $this_CurrentDate_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getPickFirstParserRuleCall_8());
		}
		this_PickFirst_8=rulePickFirst
		{
			$current = $this_PickFirst_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getExtractParserRuleCall_9());
		}
		this_Extract_9=ruleExtract
		{
			$current = $this_Extract_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getTranslateUnicodeParserRuleCall_10());
		}
		this_TranslateUnicode_10=ruleTranslateUnicode
		{
			$current = $this_TranslateUnicode_10.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getAddToDateParserRuleCall_11());
		}
		this_AddToDate_11=ruleAddToDate
		{
			$current = $this_AddToDate_11.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getUUIDFuncParserRuleCall_12());
		}
		this_UUIDFunc_12=ruleUUIDFunc
		{
			$current = $this_UUIDFunc_12.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getLowerFuncParserRuleCall_13());
		}
		this_LowerFunc_13=ruleLowerFunc
		{
			$current = $this_LowerFunc_13.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getUpperFuncParserRuleCall_14());
		}
		this_UpperFunc_14=ruleUpperFunc
		{
			$current = $this_UpperFunc_14.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCollectionFunction
entryRuleCollectionFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCollectionFunctionRule()); }
	iv_ruleCollectionFunction=ruleCollectionFunction
	{ $current=$iv_ruleCollectionFunction.current; }
	EOF;

// Rule CollectionFunction
ruleCollectionFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCollectionFunctionAccess().getFunctionCollectionFunctionCallParserRuleCall_0_0());
				}
				lv_function_0_0=ruleCollectionFunctionCall
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCollectionFunctionRule());
					}
					set(
						$current,
						"function",
						lv_function_0_0,
						"com.intuit.dsl.Expression.CollectionFunctionCall");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				('[')=>
				otherlv_1='['
				{
					newLeafNode(otherlv_1, grammarAccess.getCollectionFunctionAccess().getLeftSquareBracketKeyword_1_0());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getCollectionFunctionAccess().getRefexpExpressionParserRuleCall_1_1_0());
					}
					lv_refexp_2_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCollectionFunctionRule());
						}
						set(
							$current,
							"refexp",
							lv_refexp_2_0,
							"com.intuit.dsl.Expression.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=']'
			{
				newLeafNode(otherlv_3, grammarAccess.getCollectionFunctionAccess().getRightSquareBracketKeyword_1_2());
			}
		)?
		(
			otherlv_4='.'
			{
				newLeafNode(otherlv_4, grammarAccess.getCollectionFunctionAccess().getFullStopKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCollectionFunctionAccess().getResultKeyKeyParserRuleCall_2_1_0());
					}
					lv_resultKey_5_0=ruleKey
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCollectionFunctionRule());
						}
						add(
							$current,
							"resultKey",
							lv_resultKey_5_0,
							"com.intuit.dsl.Expression.Key");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleCollectionFunctionCall
entryRuleCollectionFunctionCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCollectionFunctionCallRule()); }
	iv_ruleCollectionFunctionCall=ruleCollectionFunctionCall
	{ $current=$iv_ruleCollectionFunctionCall.current; }
	EOF;

// Rule CollectionFunctionCall
ruleCollectionFunctionCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCollectionFunctionCallAccess().getRemoveFuncParserRuleCall_0());
		}
		this_RemoveFunc_0=ruleRemoveFunc
		{
			$current = $this_RemoveFunc_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCollectionFunctionCallAccess().getFindFirstFuncParserRuleCall_1());
		}
		this_FindFirstFunc_1=ruleFindFirstFunc
		{
			$current = $this_FindFirstFunc_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCollectionFunctionCallAccess().getFilterFuncParserRuleCall_2());
		}
		this_FilterFunc_2=ruleFilterFunc
		{
			$current = $this_FilterFunc_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCollectionFunctionCallAccess().getMapFuncParserRuleCall_3());
		}
		this_MapFunc_3=ruleMapFunc
		{
			$current = $this_MapFunc_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCollectionFunctionCallAccess().getSplitParserRuleCall_4());
		}
		this_Split_4=ruleSplit
		{
			$current = $this_Split_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCollectionFunctionCallAccess().getJsonParserRuleCall_5());
		}
		this_Json_5=ruleJson
		{
			$current = $this_Json_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCollectionFunctionCallAccess().getConcatFuncParserRuleCall_6());
		}
		this_ConcatFunc_6=ruleConcatFunc
		{
			$current = $this_ConcatFunc_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCollectionFunctionCallAccess().getSortFuncParserRuleCall_7());
		}
		this_SortFunc_7=ruleSortFunc
		{
			$current = $this_SortFunc_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCollectionFunctionCallAccess().getDedupFuncParserRuleCall_8());
		}
		this_DedupFunc_8=ruleDedupFunc
		{
			$current = $this_DedupFunc_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCollectionFunctionCallAccess().getLastFuncParserRuleCall_9());
		}
		this_LastFunc_9=ruleLastFunc
		{
			$current = $this_LastFunc_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCollectionFunctionCallAccess().getParentFuncParserRuleCall_10());
		}
		this_ParentFunc_10=ruleParentFunc
		{
			$current = $this_ParentFunc_10.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleParentFunc
entryRuleParentFunc returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParentFuncRule()); }
	iv_ruleParentFunc=ruleParentFunc
	{ $current=$iv_ruleParentFunc.current; }
	EOF;

// Rule ParentFunc
ruleParentFunc returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='parent('
		{
			newLeafNode(otherlv_0, grammarAccess.getParentFuncAccess().getParentKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getParentFuncAccess().getExpExpressionParserRuleCall_1_0());
				}
				lv_exp_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParentFuncRule());
					}
					set(
						$current,
						"exp",
						lv_exp_1_0,
						"com.intuit.dsl.Expression.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getParentFuncAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleLastFunc
entryRuleLastFunc returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLastFuncRule()); }
	iv_ruleLastFunc=ruleLastFunc
	{ $current=$iv_ruleLastFunc.current; }
	EOF;

// Rule LastFunc
ruleLastFunc returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='last('
		{
			newLeafNode(otherlv_0, grammarAccess.getLastFuncAccess().getLastKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLastFuncAccess().getExpExpressionParserRuleCall_1_0());
				}
				lv_exp_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLastFuncRule());
					}
					set(
						$current,
						"exp",
						lv_exp_1_0,
						"com.intuit.dsl.Expression.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getLastFuncAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleDelete
entryRuleDelete returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeleteRule()); }
	iv_ruleDelete=ruleDelete
	{ $current=$iv_ruleDelete.current; }
	EOF;

// Rule Delete
ruleDelete returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='delete('
		{
			newLeafNode(otherlv_0, grammarAccess.getDeleteAccess().getDeleteKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDeleteAccess().getVariableVariableParserRuleCall_1_0());
				}
				lv_variable_1_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeleteRule());
					}
					set(
						$current,
						"variable",
						lv_variable_1_0,
						"com.intuit.dsl.Expression.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getDeleteAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleSplit
entryRuleSplit returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSplitRule()); }
	iv_ruleSplit=ruleSplit
	{ $current=$iv_ruleSplit.current; }
	EOF;

// Rule Split
ruleSplit returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='split('
		{
			newLeafNode(otherlv_0, grammarAccess.getSplitAccess().getSplitKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSplitAccess().getExpExpressionParserRuleCall_1_0());
				}
				lv_exp_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSplitRule());
					}
					set(
						$current,
						"exp",
						lv_exp_1_0,
						"com.intuit.dsl.Expression.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=','
		{
			newLeafNode(otherlv_2, grammarAccess.getSplitAccess().getCommaKeyword_2());
		}
		(
			(
				lv_regex_3_0=RULE_STRING
				{
					newLeafNode(lv_regex_3_0, grammarAccess.getSplitAccess().getRegexSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSplitRule());
					}
					setWithLastConsumed(
						$current,
						"regex",
						lv_regex_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getSplitAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleContains
entryRuleContains returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContainsRule()); }
	iv_ruleContains=ruleContains
	{ $current=$iv_ruleContains.current; }
	EOF;

// Rule Contains
ruleContains returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='contains('
		{
			newLeafNode(otherlv_0, grammarAccess.getContainsAccess().getContainsKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getContainsAccess().getInputExpressionParserRuleCall_1_0());
				}
				lv_input_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContainsRule());
					}
					set(
						$current,
						"input",
						lv_input_1_0,
						"com.intuit.dsl.Expression.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=','
		{
			newLeafNode(otherlv_2, grammarAccess.getContainsAccess().getCommaKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getContainsAccess().getSearchExpressionParserRuleCall_3_0());
				}
				lv_search_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContainsRule());
					}
					set(
						$current,
						"search",
						lv_search_3_0,
						"com.intuit.dsl.Expression.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getContainsAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleExtract
entryRuleExtract returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExtractRule()); }
	iv_ruleExtract=ruleExtract
	{ $current=$iv_ruleExtract.current; }
	EOF;

// Rule Extract
ruleExtract returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='extract('
		{
			newLeafNode(otherlv_0, grammarAccess.getExtractAccess().getExtractKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExtractAccess().getInputExpressionParserRuleCall_1_0());
				}
				lv_input_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExtractRule());
					}
					set(
						$current,
						"input",
						lv_input_1_0,
						"com.intuit.dsl.Expression.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=','
		{
			newLeafNode(otherlv_2, grammarAccess.getExtractAccess().getCommaKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExtractAccess().getRangeRangeParserRuleCall_3_0());
				}
				lv_range_3_0=ruleRange
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExtractRule());
					}
					set(
						$current,
						"range",
						lv_range_3_0,
						"com.intuit.dsl.Expression.Range");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getExtractAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleDateFormat
entryRuleDateFormat returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDateFormatRule()); }
	iv_ruleDateFormat=ruleDateFormat
	{ $current=$iv_ruleDateFormat.current; }
	EOF;

// Rule DateFormat
ruleDateFormat returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='dateFormat'
		{
			newLeafNode(otherlv_0, grammarAccess.getDateFormatAccess().getDateFormatKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getDateFormatAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					lv_from_2_1='"MM/dd/yyyy"'
					{
						newLeafNode(lv_from_2_1, grammarAccess.getDateFormatAccess().getFromMMDdYyyyKeyword_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDateFormatRule());
						}
						setWithLastConsumed($current, "from", lv_from_2_1, null);
					}
					    |
					lv_from_2_2='"yyyyMMdd"'
					{
						newLeafNode(lv_from_2_2, grammarAccess.getDateFormatAccess().getFromYyyyMMddKeyword_2_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDateFormatRule());
						}
						setWithLastConsumed($current, "from", lv_from_2_2, null);
					}
					    |
					lv_from_2_3='"yyyy-MM-dd"'
					{
						newLeafNode(lv_from_2_3, grammarAccess.getDateFormatAccess().getFromYyyyMMDdKeyword_2_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDateFormatRule());
						}
						setWithLastConsumed($current, "from", lv_from_2_3, null);
					}
					    |
					lv_from_2_4='"ms"'
					{
						newLeafNode(lv_from_2_4, grammarAccess.getDateFormatAccess().getFromMsKeyword_2_0_3());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDateFormatRule());
						}
						setWithLastConsumed($current, "from", lv_from_2_4, null);
					}
					    |
					lv_from_2_5=RULE_STRING
					{
						newLeafNode(lv_from_2_5, grammarAccess.getDateFormatAccess().getFromSTRINGTerminalRuleCall_2_0_4());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDateFormatRule());
						}
						setWithLastConsumed(
							$current,
							"from",
							lv_from_2_5,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getDateFormatAccess().getCommaKeyword_3());
		}
		(
			(
				(
					lv_to_4_1='"MM/dd/yyyy"'
					{
						newLeafNode(lv_to_4_1, grammarAccess.getDateFormatAccess().getToMMDdYyyyKeyword_4_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDateFormatRule());
						}
						setWithLastConsumed($current, "to", lv_to_4_1, null);
					}
					    |
					lv_to_4_2='"yyyyMMdd"'
					{
						newLeafNode(lv_to_4_2, grammarAccess.getDateFormatAccess().getToYyyyMMddKeyword_4_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDateFormatRule());
						}
						setWithLastConsumed($current, "to", lv_to_4_2, null);
					}
					    |
					lv_to_4_3='"yyyy-MM-dd"'
					{
						newLeafNode(lv_to_4_3, grammarAccess.getDateFormatAccess().getToYyyyMMDdKeyword_4_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDateFormatRule());
						}
						setWithLastConsumed($current, "to", lv_to_4_3, null);
					}
					    |
					lv_to_4_4='"ms"'
					{
						newLeafNode(lv_to_4_4, grammarAccess.getDateFormatAccess().getToMsKeyword_4_0_3());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDateFormatRule());
						}
						setWithLastConsumed($current, "to", lv_to_4_4, null);
					}
					    |
					lv_to_4_5=RULE_STRING
					{
						newLeafNode(lv_to_4_5, grammarAccess.getDateFormatAccess().getToSTRINGTerminalRuleCall_4_0_4());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDateFormatRule());
						}
						setWithLastConsumed(
							$current,
							"to",
							lv_to_4_5,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		otherlv_5=','
		{
			newLeafNode(otherlv_5, grammarAccess.getDateFormatAccess().getCommaKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDateFormatAccess().getExpExpressionParserRuleCall_6_0());
				}
				lv_exp_6_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDateFormatRule());
					}
					set(
						$current,
						"exp",
						lv_exp_6_0,
						"com.intuit.dsl.Expression.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getDateFormatAccess().getRightParenthesisKeyword_7());
		}
	)
;

// Entry rule entryRuleAddToDate
entryRuleAddToDate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAddToDateRule()); }
	iv_ruleAddToDate=ruleAddToDate
	{ $current=$iv_ruleAddToDate.current; }
	EOF;

// Rule AddToDate
ruleAddToDate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='addToDate'
		{
			newLeafNode(otherlv_0, grammarAccess.getAddToDateAccess().getAddToDateKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getAddToDateAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAddToDateAccess().getDateExpExpressionParserRuleCall_2_0());
				}
				lv_dateExp_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAddToDateRule());
					}
					set(
						$current,
						"dateExp",
						lv_dateExp_2_0,
						"com.intuit.dsl.Expression.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getAddToDateAccess().getCommaKeyword_3());
		}
		(
			(
				(
					lv_format_4_1='"MM/dd/yyyy"'
					{
						newLeafNode(lv_format_4_1, grammarAccess.getAddToDateAccess().getFormatMMDdYyyyKeyword_4_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAddToDateRule());
						}
						setWithLastConsumed($current, "format", lv_format_4_1, null);
					}
					    |
					lv_format_4_2='"yyyyMMdd"'
					{
						newLeafNode(lv_format_4_2, grammarAccess.getAddToDateAccess().getFormatYyyyMMddKeyword_4_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAddToDateRule());
						}
						setWithLastConsumed($current, "format", lv_format_4_2, null);
					}
					    |
					lv_format_4_3='"yyyy-MM-dd"'
					{
						newLeafNode(lv_format_4_3, grammarAccess.getAddToDateAccess().getFormatYyyyMMDdKeyword_4_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAddToDateRule());
						}
						setWithLastConsumed($current, "format", lv_format_4_3, null);
					}
					    |
					lv_format_4_4='"ms"'
					{
						newLeafNode(lv_format_4_4, grammarAccess.getAddToDateAccess().getFormatMsKeyword_4_0_3());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAddToDateRule());
						}
						setWithLastConsumed($current, "format", lv_format_4_4, null);
					}
					    |
					lv_format_4_5=RULE_STRING
					{
						newLeafNode(lv_format_4_5, grammarAccess.getAddToDateAccess().getFormatSTRINGTerminalRuleCall_4_0_4());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAddToDateRule());
						}
						setWithLastConsumed(
							$current,
							"format",
							lv_format_4_5,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		otherlv_5=','
		{
			newLeafNode(otherlv_5, grammarAccess.getAddToDateAccess().getCommaKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAddToDateAccess().getExpExpressionParserRuleCall_6_0());
				}
				lv_exp_6_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAddToDateRule());
					}
					set(
						$current,
						"exp",
						lv_exp_6_0,
						"com.intuit.dsl.Expression.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=','
		{
			newLeafNode(otherlv_7, grammarAccess.getAddToDateAccess().getCommaKeyword_7());
		}
		(
			(
				lv_type_8_0='Days'
				{
					newLeafNode(lv_type_8_0, grammarAccess.getAddToDateAccess().getTypeDaysKeyword_8_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAddToDateRule());
					}
					setWithLastConsumed($current, "type", lv_type_8_0, "Days");
				}
			)
		)
		otherlv_9=')'
		{
			newLeafNode(otherlv_9, grammarAccess.getAddToDateAccess().getRightParenthesisKeyword_9());
		}
	)
;

// Entry rule entryRuleFilterFunc
entryRuleFilterFunc returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFilterFuncRule()); }
	iv_ruleFilterFunc=ruleFilterFunc
	{ $current=$iv_ruleFilterFunc.current; }
	EOF;

// Rule FilterFunc
ruleFilterFunc returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='filter('
		{
			newLeafNode(otherlv_0, grammarAccess.getFilterFuncAccess().getFilterKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFilterFuncAccess().getExpExpressionParserRuleCall_1_0());
				}
				lv_exp_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFilterFuncRule());
					}
					set(
						$current,
						"exp",
						lv_exp_1_0,
						"com.intuit.dsl.Expression.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=','
		{
			newLeafNode(otherlv_2, grammarAccess.getFilterFuncAccess().getCommaKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFilterFuncAccess().getCondtionBooleanExpressionParserRuleCall_3_0());
				}
				lv_condtion_3_0=ruleBooleanExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFilterFuncRule());
					}
					set(
						$current,
						"condtion",
						lv_condtion_3_0,
						"com.intuit.dsl.Expression.BooleanExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getFilterFuncAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleFindFirstFunc
entryRuleFindFirstFunc returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFindFirstFuncRule()); }
	iv_ruleFindFirstFunc=ruleFindFirstFunc
	{ $current=$iv_ruleFindFirstFunc.current; }
	EOF;

// Rule FindFirstFunc
ruleFindFirstFunc returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='findFirst'
		{
			newLeafNode(otherlv_0, grammarAccess.getFindFirstFuncAccess().getFindFirstKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getFindFirstFuncAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFindFirstFuncAccess().getExpExpressionParserRuleCall_2_0());
				}
				lv_exp_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFindFirstFuncRule());
					}
					set(
						$current,
						"exp",
						lv_exp_2_0,
						"com.intuit.dsl.Expression.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getFindFirstFuncAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFindFirstFuncAccess().getConditionBooleanExpressionParserRuleCall_4_0());
				}
				lv_condition_4_0=ruleBooleanExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFindFirstFuncRule());
					}
					set(
						$current,
						"condition",
						lv_condition_4_0,
						"com.intuit.dsl.Expression.BooleanExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getFindFirstFuncAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleRemoveFunc
entryRuleRemoveFunc returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRemoveFuncRule()); }
	iv_ruleRemoveFunc=ruleRemoveFunc
	{ $current=$iv_ruleRemoveFunc.current; }
	EOF;

// Rule RemoveFunc
ruleRemoveFunc returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='remove'
		{
			newLeafNode(otherlv_0, grammarAccess.getRemoveFuncAccess().getRemoveKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getRemoveFuncAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRemoveFuncAccess().getExpExpressionParserRuleCall_2_0());
				}
				lv_exp_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRemoveFuncRule());
					}
					set(
						$current,
						"exp",
						lv_exp_2_0,
						"com.intuit.dsl.Expression.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getRemoveFuncAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRemoveFuncAccess().getConditionBooleanExpressionParserRuleCall_4_0());
				}
				lv_condition_4_0=ruleBooleanExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRemoveFuncRule());
					}
					set(
						$current,
						"condition",
						lv_condition_4_0,
						"com.intuit.dsl.Expression.BooleanExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getRemoveFuncAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleSortFunc
entryRuleSortFunc returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSortFuncRule()); }
	iv_ruleSortFunc=ruleSortFunc
	{ $current=$iv_ruleSortFunc.current; }
	EOF;

// Rule SortFunc
ruleSortFunc returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='sort('
		{
			newLeafNode(otherlv_0, grammarAccess.getSortFuncAccess().getSortKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSortFuncAccess().getExpExpressionParserRuleCall_1_0());
				}
				lv_exp_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSortFuncRule());
					}
					set(
						$current,
						"exp",
						lv_exp_1_0,
						"com.intuit.dsl.Expression.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=','
		{
			newLeafNode(otherlv_2, grammarAccess.getSortFuncAccess().getCommaKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSortFuncAccess().getKeySchemaVariableParserRuleCall_3_0());
				}
				lv_key_3_0=ruleSchemaVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSortFuncRule());
					}
					set(
						$current,
						"key",
						lv_key_3_0,
						"com.intuit.dsl.Expression.SchemaVariable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getSortFuncAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSortFuncAccess().getTypeORDER_TYPEParserRuleCall_4_1_0());
					}
					lv_type_5_0=ruleORDER_TYPE
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSortFuncRule());
						}
						set(
							$current,
							"type",
							lv_type_5_0,
							"com.intuit.dsl.Expression.ORDER_TYPE");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getSortFuncAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleDedupFunc
entryRuleDedupFunc returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDedupFuncRule()); }
	iv_ruleDedupFunc=ruleDedupFunc
	{ $current=$iv_ruleDedupFunc.current; }
	EOF;

// Rule DedupFunc
ruleDedupFunc returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='dedup('
		{
			newLeafNode(otherlv_0, grammarAccess.getDedupFuncAccess().getDedupKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDedupFuncAccess().getExpExpressionParserRuleCall_1_0());
				}
				lv_exp_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDedupFuncRule());
					}
					set(
						$current,
						"exp",
						lv_exp_1_0,
						"com.intuit.dsl.Expression.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getDedupFuncAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDedupFuncAccess().getKeySchemaVariableParserRuleCall_2_1_0());
					}
					lv_key_3_0=ruleSchemaVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDedupFuncRule());
						}
						set(
							$current,
							"key",
							lv_key_3_0,
							"com.intuit.dsl.Expression.SchemaVariable");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getDedupFuncAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleORDER_TYPE
entryRuleORDER_TYPE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getORDER_TYPERule()); }
	iv_ruleORDER_TYPE=ruleORDER_TYPE
	{ $current=$iv_ruleORDER_TYPE.current.getText(); }
	EOF;

// Rule ORDER_TYPE
ruleORDER_TYPE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='ascending'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getORDER_TYPEAccess().getAscendingKeyword_0());
		}
		    |
		kw='descending'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getORDER_TYPEAccess().getDescendingKeyword_1());
		}
	)
;

// Entry rule entryRuleMapFunc
entryRuleMapFunc returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMapFuncRule()); }
	iv_ruleMapFunc=ruleMapFunc
	{ $current=$iv_ruleMapFunc.current; }
	EOF;

// Rule MapFunc
ruleMapFunc returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='map('
		{
			newLeafNode(otherlv_0, grammarAccess.getMapFuncAccess().getMapKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMapFuncAccess().getExpExpressionParserRuleCall_1_0());
				}
				lv_exp_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMapFuncRule());
					}
					set(
						$current,
						"exp",
						lv_exp_1_0,
						"com.intuit.dsl.Expression.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='{'
			{
				newLeafNode(otherlv_2, grammarAccess.getMapFuncAccess().getLeftCurlyBracketKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMapFuncAccess().getRangeRangeParserRuleCall_2_1_0());
					}
					lv_range_3_0=ruleRange
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMapFuncRule());
						}
						set(
							$current,
							"range",
							lv_range_3_0,
							"com.intuit.dsl.Expression.Range");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4='}'
			{
				newLeafNode(otherlv_4, grammarAccess.getMapFuncAccess().getRightCurlyBracketKeyword_2_2());
			}
		)?
		(
			otherlv_5='as'
			{
				newLeafNode(otherlv_5, grammarAccess.getMapFuncAccess().getAsKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMapFuncAccess().getAliasKeyAllowedKeywordParserRuleCall_3_1_0());
					}
					lv_aliasKey_6_0=ruleAllowedKeyword
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMapFuncRule());
						}
						set(
							$current,
							"aliasKey",
							lv_aliasKey_6_0,
							"com.intuit.dsl.Expression.AllowedKeyword");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_7='->'
		{
			newLeafNode(otherlv_7, grammarAccess.getMapFuncAccess().getHyphenMinusGreaterThanSignKeyword_4());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMapFuncAccess().getReturnexpExpressionParserRuleCall_5_0_0());
					}
					lv_returnexp_8_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMapFuncRule());
						}
						set(
							$current,
							"returnexp",
							lv_returnexp_8_0,
							"com.intuit.dsl.Expression.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				otherlv_9='{'
				{
					newLeafNode(otherlv_9, grammarAccess.getMapFuncAccess().getLeftCurlyBracketKeyword_5_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getMapFuncAccess().getStatementMapStatementParserRuleCall_5_1_1_0());
						}
						lv_statement_10_0=ruleMapStatement
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMapFuncRule());
							}
							add(
								$current,
								"statement",
								lv_statement_10_0,
								"com.intuit.dsl.Expression.MapStatement");
							afterParserOrEnumRuleCall();
						}
					)
				)+
				otherlv_11='}'
				{
					newLeafNode(otherlv_11, grammarAccess.getMapFuncAccess().getRightCurlyBracketKeyword_5_1_2());
				}
			)
		)
		otherlv_12=')'
		{
			newLeafNode(otherlv_12, grammarAccess.getMapFuncAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRuleRange
entryRuleRange returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRangeRule()); }
	iv_ruleRange=ruleRange
	{ $current=$iv_ruleRange.current; }
	EOF;

// Rule Range
ruleRange returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRangeAccess().getLowExpressionParserRuleCall_0_0());
				}
				lv_low_0_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRangeRule());
					}
					set(
						$current,
						"low",
						lv_low_0_0,
						"com.intuit.dsl.Expression.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				lv_diff_1_0='..'
				{
					newLeafNode(lv_diff_1_0, grammarAccess.getRangeAccess().getDiffFullStopFullStopKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRangeRule());
					}
					setWithLastConsumed($current, "diff", lv_diff_1_0, "..");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRangeAccess().getHighExpressionParserRuleCall_2_0());
				}
				lv_high_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRangeRule());
					}
					set(
						$current,
						"high",
						lv_high_2_0,
						"com.intuit.dsl.Expression.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleMapStatement
entryRuleMapStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMapStatementRule()); }
	iv_ruleMapStatement=ruleMapStatement
	{ $current=$iv_ruleMapStatement.current; }
	EOF;

// Rule MapStatement
ruleMapStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMapStatementAccess().getResultKeyKeyParserRuleCall_0_0());
				}
				lv_resultKey_0_0=ruleKey
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMapStatementRule());
					}
					add(
						$current,
						"resultKey",
						lv_resultKey_0_0,
						"com.intuit.dsl.Expression.Key");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='.'
			{
				newLeafNode(otherlv_1, grammarAccess.getMapStatementAccess().getFullStopKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMapStatementAccess().getResultKeyKeyParserRuleCall_1_1_0());
					}
					lv_resultKey_2_0=ruleKey
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMapStatementRule());
						}
						add(
							$current,
							"resultKey",
							lv_resultKey_2_0,
							"com.intuit.dsl.Expression.Key");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_3='='
		{
			newLeafNode(otherlv_3, grammarAccess.getMapStatementAccess().getEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMapStatementAccess().getExpExpressionParserRuleCall_3_0());
				}
				lv_exp_4_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMapStatementRule());
					}
					set(
						$current,
						"exp",
						lv_exp_4_0,
						"com.intuit.dsl.Expression.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleConcatFunc
entryRuleConcatFunc returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConcatFuncRule()); }
	iv_ruleConcatFunc=ruleConcatFunc
	{ $current=$iv_ruleConcatFunc.current; }
	EOF;

// Rule ConcatFunc
ruleConcatFunc returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='concat('
		{
			newLeafNode(otherlv_0, grammarAccess.getConcatFuncAccess().getConcatKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConcatFuncAccess().getExpExpressionParserRuleCall_1_0());
				}
				lv_exp_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConcatFuncRule());
					}
					add(
						$current,
						"exp",
						lv_exp_1_0,
						"com.intuit.dsl.Expression.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getConcatFuncAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConcatFuncAccess().getExpExpressionParserRuleCall_2_1_0());
					}
					lv_exp_3_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConcatFuncRule());
						}
						add(
							$current,
							"exp",
							lv_exp_3_0,
							"com.intuit.dsl.Expression.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getConcatFuncAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleLength
entryRuleLength returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLengthRule()); }
	iv_ruleLength=ruleLength
	{ $current=$iv_ruleLength.current; }
	EOF;

// Rule Length
ruleLength returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='length('
		{
			newLeafNode(otherlv_0, grammarAccess.getLengthAccess().getLengthKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLengthAccess().getExpExpressionParserRuleCall_1_0());
				}
				lv_exp_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLengthRule());
					}
					set(
						$current,
						"exp",
						lv_exp_1_0,
						"com.intuit.dsl.Expression.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getLengthAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleLowerFunc
entryRuleLowerFunc returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLowerFuncRule()); }
	iv_ruleLowerFunc=ruleLowerFunc
	{ $current=$iv_ruleLowerFunc.current; }
	EOF;

// Rule LowerFunc
ruleLowerFunc returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='lowerCase('
		{
			newLeafNode(otherlv_0, grammarAccess.getLowerFuncAccess().getLowerCaseKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLowerFuncAccess().getExpExpressionParserRuleCall_1_0());
				}
				lv_exp_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLowerFuncRule());
					}
					set(
						$current,
						"exp",
						lv_exp_1_0,
						"com.intuit.dsl.Expression.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getLowerFuncAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleUpperFunc
entryRuleUpperFunc returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUpperFuncRule()); }
	iv_ruleUpperFunc=ruleUpperFunc
	{ $current=$iv_ruleUpperFunc.current; }
	EOF;

// Rule UpperFunc
ruleUpperFunc returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='upperCase('
		{
			newLeafNode(otherlv_0, grammarAccess.getUpperFuncAccess().getUpperCaseKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUpperFuncAccess().getExpExpressionParserRuleCall_1_0());
				}
				lv_exp_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUpperFuncRule());
					}
					set(
						$current,
						"exp",
						lv_exp_1_0,
						"com.intuit.dsl.Expression.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getUpperFuncAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleUUIDFunc
entryRuleUUIDFunc returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUUIDFuncRule()); }
	iv_ruleUUIDFunc=ruleUUIDFunc
	{ $current=$iv_ruleUUIDFunc.current; }
	EOF;

// Rule UUIDFunc
ruleUUIDFunc returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getUUIDFuncAccess().getUUIDFuncAction_0(),
					$current);
			}
		)
		otherlv_1='uuid()'
		{
			newLeafNode(otherlv_1, grammarAccess.getUUIDFuncAccess().getUuidKeyword_1());
		}
	)
;

// Entry rule entryRuleJson
entryRuleJson returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJsonRule()); }
	iv_ruleJson=ruleJson
	{ $current=$iv_ruleJson.current; }
	EOF;

// Rule Json
ruleJson returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='json('
		{
			newLeafNode(otherlv_0, grammarAccess.getJsonAccess().getJsonKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getJsonAccess().getExpSchemaVariableParserRuleCall_1_0());
				}
				lv_exp_1_0=ruleSchemaVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJsonRule());
					}
					set(
						$current,
						"exp",
						lv_exp_1_0,
						"com.intuit.dsl.Expression.SchemaVariable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getJsonAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleJoin
entryRuleJoin returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJoinRule()); }
	iv_ruleJoin=ruleJoin
	{ $current=$iv_ruleJoin.current; }
	EOF;

// Rule Join
ruleJoin returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='join('
		{
			newLeafNode(otherlv_0, grammarAccess.getJoinAccess().getJoinKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getJoinAccess().getExpExpressionParserRuleCall_1_0());
				}
				lv_exp_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJoinRule());
					}
					set(
						$current,
						"exp",
						lv_exp_1_0,
						"com.intuit.dsl.Expression.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=','
		{
			newLeafNode(otherlv_2, grammarAccess.getJoinAccess().getCommaKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getJoinAccess().getKeyExpressionParserRuleCall_3_0());
				}
				lv_key_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJoinRule());
					}
					set(
						$current,
						"key",
						lv_key_3_0,
						"com.intuit.dsl.Expression.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getJoinAccess().getCommaKeyword_4());
		}
		(
			(
				lv_delimiter_5_0=RULE_STRING
				{
					newLeafNode(lv_delimiter_5_0, grammarAccess.getJoinAccess().getDelimiterSTRINGTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJoinRule());
					}
					setWithLastConsumed(
						$current,
						"delimiter",
						lv_delimiter_5_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			otherlv_6=','
			{
				newLeafNode(otherlv_6, grammarAccess.getJoinAccess().getCommaKeyword_6_0());
			}
			(
				(
					lv_last_7_0=RULE_STRING
					{
						newLeafNode(lv_last_7_0, grammarAccess.getJoinAccess().getLastSTRINGTerminalRuleCall_6_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getJoinRule());
						}
						setWithLastConsumed(
							$current,
							"last",
							lv_last_7_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)?
		otherlv_8=')'
		{
			newLeafNode(otherlv_8, grammarAccess.getJoinAccess().getRightParenthesisKeyword_7());
		}
	)
;

// Entry rule entryRuleDayDifference
entryRuleDayDifference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDayDifferenceRule()); }
	iv_ruleDayDifference=ruleDayDifference
	{ $current=$iv_ruleDayDifference.current; }
	EOF;

// Rule DayDifference
ruleDayDifference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='dayDifference('
		{
			newLeafNode(otherlv_0, grammarAccess.getDayDifferenceAccess().getDayDifferenceKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDayDifferenceAccess().getFromExpressionParserRuleCall_1_0());
				}
				lv_from_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDayDifferenceRule());
					}
					set(
						$current,
						"from",
						lv_from_1_0,
						"com.intuit.dsl.Expression.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=','
		{
			newLeafNode(otherlv_2, grammarAccess.getDayDifferenceAccess().getCommaKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDayDifferenceAccess().getToExpressionParserRuleCall_3_0());
				}
				lv_to_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDayDifferenceRule());
					}
					set(
						$current,
						"to",
						lv_to_3_0,
						"com.intuit.dsl.Expression.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getDayDifferenceAccess().getCommaKeyword_4());
		}
		(
			(
				(
					lv_formatter_5_1='"MM/dd/yyyy"'
					{
						newLeafNode(lv_formatter_5_1, grammarAccess.getDayDifferenceAccess().getFormatterMMDdYyyyKeyword_5_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDayDifferenceRule());
						}
						setWithLastConsumed($current, "formatter", lv_formatter_5_1, null);
					}
					    |
					lv_formatter_5_2='"yyyyMMdd"'
					{
						newLeafNode(lv_formatter_5_2, grammarAccess.getDayDifferenceAccess().getFormatterYyyyMMddKeyword_5_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDayDifferenceRule());
						}
						setWithLastConsumed($current, "formatter", lv_formatter_5_2, null);
					}
					    |
					lv_formatter_5_3='"yyyy-MM-dd"'
					{
						newLeafNode(lv_formatter_5_3, grammarAccess.getDayDifferenceAccess().getFormatterYyyyMMDdKeyword_5_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDayDifferenceRule());
						}
						setWithLastConsumed($current, "formatter", lv_formatter_5_3, null);
					}
				)
			)
		)
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getDayDifferenceAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRuleTranslateUnicode
entryRuleTranslateUnicode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTranslateUnicodeRule()); }
	iv_ruleTranslateUnicode=ruleTranslateUnicode
	{ $current=$iv_ruleTranslateUnicode.current; }
	EOF;

// Rule TranslateUnicode
ruleTranslateUnicode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='translateUnicode('
		{
			newLeafNode(otherlv_0, grammarAccess.getTranslateUnicodeAccess().getTranslateUnicodeKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTranslateUnicodeAccess().getExpExpressionParserRuleCall_1_0());
				}
				lv_exp_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTranslateUnicodeRule());
					}
					set(
						$current,
						"exp",
						lv_exp_1_0,
						"com.intuit.dsl.Expression.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getTranslateUnicodeAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleCurrentDate
entryRuleCurrentDate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCurrentDateRule()); }
	iv_ruleCurrentDate=ruleCurrentDate
	{ $current=$iv_ruleCurrentDate.current; }
	EOF;

// Rule CurrentDate
ruleCurrentDate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCurrentDateAccess().getCurrentDateAction_0(),
					$current);
			}
		)
		otherlv_1='currentDate('
		{
			newLeafNode(otherlv_1, grammarAccess.getCurrentDateAccess().getCurrentDateKeyword_1());
		}
		(
			(
				(
					lv_format_2_1='"MM/dd/yyyy"'
					{
						newLeafNode(lv_format_2_1, grammarAccess.getCurrentDateAccess().getFormatMMDdYyyyKeyword_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCurrentDateRule());
						}
						setWithLastConsumed($current, "format", lv_format_2_1, null);
					}
					    |
					lv_format_2_2='"yyyyMMdd"'
					{
						newLeafNode(lv_format_2_2, grammarAccess.getCurrentDateAccess().getFormatYyyyMMddKeyword_2_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCurrentDateRule());
						}
						setWithLastConsumed($current, "format", lv_format_2_2, null);
					}
					    |
					lv_format_2_3='"yyyy-MM-dd"'
					{
						newLeafNode(lv_format_2_3, grammarAccess.getCurrentDateAccess().getFormatYyyyMMDdKeyword_2_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCurrentDateRule());
						}
						setWithLastConsumed($current, "format", lv_format_2_3, null);
					}
					    |
					lv_format_2_4='"ms"'
					{
						newLeafNode(lv_format_2_4, grammarAccess.getCurrentDateAccess().getFormatMsKeyword_2_0_3());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCurrentDateRule());
						}
						setWithLastConsumed($current, "format", lv_format_2_4, null);
					}
					    |
					lv_format_2_5=RULE_STRING
					{
						newLeafNode(lv_format_2_5, grammarAccess.getCurrentDateAccess().getFormatSTRINGTerminalRuleCall_2_0_4());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCurrentDateRule());
						}
						setWithLastConsumed(
							$current,
							"format",
							lv_format_2_5,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)?
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getCurrentDateAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRulePickFirst
entryRulePickFirst returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPickFirstRule()); }
	iv_rulePickFirst=rulePickFirst
	{ $current=$iv_rulePickFirst.current; }
	EOF;

// Rule PickFirst
rulePickFirst returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='pickFirst('
		{
			newLeafNode(otherlv_0, grammarAccess.getPickFirstAccess().getPickFirstKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPickFirstAccess().getExpExpressionParserRuleCall_1_0());
				}
				lv_exp_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPickFirstRule());
					}
					add(
						$current,
						"exp",
						lv_exp_1_0,
						"com.intuit.dsl.Expression.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getPickFirstAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPickFirstAccess().getExpExpressionParserRuleCall_2_1_0());
					}
					lv_exp_3_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPickFirstRule());
						}
						add(
							$current,
							"exp",
							lv_exp_3_0,
							"com.intuit.dsl.Expression.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
		otherlv_4='->'
		{
			newLeafNode(otherlv_4, grammarAccess.getPickFirstAccess().getHyphenMinusGreaterThanSignKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPickFirstAccess().getConditionComparisonParserRuleCall_4_0());
				}
				lv_condition_5_0=ruleComparison
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPickFirstRule());
					}
					set(
						$current,
						"condition",
						lv_condition_5_0,
						"com.intuit.dsl.Expression.Comparison");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getPickFirstAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getVariableAccess().getSchemaVariableSchemaVariableParserRuleCall_0());
			}
			lv_schemaVariable_0_0=ruleSchemaVariable
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getVariableRule());
				}
				set(
					$current,
					"schemaVariable",
					lv_schemaVariable_0_0,
					"com.intuit.dsl.Expression.SchemaVariable");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleKey
entryRuleKey returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getKeyRule()); }
	iv_ruleKey=ruleKey
	{ $current=$iv_ruleKey.current; }
	EOF;

// Rule Key
ruleKey returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getKeyAccess().getIdAllowedKeywordParserRuleCall_0_0());
				}
				lv_id_0_0=ruleAllowedKeyword
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getKeyRule());
					}
					set(
						$current,
						"id",
						lv_id_0_0,
						"com.intuit.dsl.Expression.AllowedKeyword");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				('[')=>
				otherlv_1='['
				{
					newLeafNode(otherlv_1, grammarAccess.getKeyAccess().getLeftSquareBracketKeyword_1_0());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getKeyAccess().getExpExpressionParserRuleCall_1_1_0());
					}
					lv_exp_2_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getKeyRule());
						}
						set(
							$current,
							"exp",
							lv_exp_2_0,
							"com.intuit.dsl.Expression.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=']'
			{
				newLeafNode(otherlv_3, grammarAccess.getKeyAccess().getRightSquareBracketKeyword_1_2());
			}
		)?
	)
;

// Entry rule entryRuleSchemaVariable
entryRuleSchemaVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSchemaVariableRule()); }
	iv_ruleSchemaVariable=ruleSchemaVariable
	{ $current=$iv_ruleSchemaVariable.current; }
	EOF;

// Rule SchemaVariable
ruleSchemaVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_global_0_0='::'
				{
					newLeafNode(lv_global_0_0, grammarAccess.getSchemaVariableAccess().getGlobalColonColonKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSchemaVariableRule());
					}
					setWithLastConsumed($current, "global", lv_global_0_0, "::");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getSchemaVariableAccess().getKeyKeyParserRuleCall_1_0());
				}
				lv_key_1_0=ruleKey
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSchemaVariableRule());
					}
					add(
						$current,
						"key",
						lv_key_1_0,
						"com.intuit.dsl.Expression.Key");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='.'
			{
				newLeafNode(otherlv_2, grammarAccess.getSchemaVariableAccess().getFullStopKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSchemaVariableAccess().getKeyKeyParserRuleCall_2_1_0());
					}
					lv_key_3_0=ruleKey
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSchemaVariableRule());
						}
						add(
							$current,
							"key",
							lv_key_3_0,
							"com.intuit.dsl.Expression.Key");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleProperty
entryRuleProperty returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPropertyRule()); }
	iv_ruleProperty=ruleProperty
	{ $current=$iv_ruleProperty.current; }
	EOF;

// Rule Property
ruleProperty returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='@Config('
		{
			newLeafNode(otherlv_0, grammarAccess.getPropertyAccess().getConfigKeyword_0());
		}
		(
			(
				lv_key_1_0=RULE_STRING
				{
					newLeafNode(lv_key_1_0, grammarAccess.getPropertyAccess().getKeySTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPropertyRule());
					}
					setWithLastConsumed(
						$current,
						"key",
						lv_key_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getPropertyAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleAllowedKeyword
entryRuleAllowedKeyword returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAllowedKeywordRule()); }
	iv_ruleAllowedKeyword=ruleAllowedKeyword
	{ $current=$iv_ruleAllowedKeyword.current.getText(); }
	EOF;

// Rule AllowedKeyword
ruleAllowedKeyword returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getAllowedKeywordAccess().getIDTerminalRuleCall_0());
		}
		    |
		kw='length'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAllowedKeywordAccess().getLengthKeyword_1());
		}
		    |
		kw='filter'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAllowedKeywordAccess().getFilterKeyword_2());
		}
		    |
		kw='delete'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAllowedKeywordAccess().getDeleteKeyword_3());
		}
		    |
		kw='path'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAllowedKeywordAccess().getPathKeyword_4());
		}
		    |
		kw='it'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAllowedKeywordAccess().getItKeyword_5());
		}
		    |
		kw='field'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAllowedKeywordAccess().getFieldKeyword_6());
		}
		    |
		kw='default'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAllowedKeywordAccess().getDefaultKeyword_7());
		}
		    |
		kw='template'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAllowedKeywordAccess().getTemplateKeyword_8());
		}
		    |
		kw='uuid'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAllowedKeywordAccess().getUuidKeyword_9());
		}
		    |
		kw='parent'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAllowedKeywordAccess().getParentKeyword_10());
		}
		    |
		kw='json'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAllowedKeywordAccess().getJsonKeyword_11());
		}
		    |
		kw='join'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAllowedKeywordAccess().getJoinKeyword_12());
		}
		    |
		kw='translateUnicode'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAllowedKeywordAccess().getTranslateUnicodeKeyword_13());
		}
		    |
		kw='upperCase'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAllowedKeywordAccess().getUpperCaseKeyword_14());
		}
		    |
		kw='lowerCase'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAllowedKeywordAccess().getLowerCaseKeyword_15());
		}
		    |
		kw='concat'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAllowedKeywordAccess().getConcatKeyword_16());
		}
	)
;

// Entry rule entryRuleNUMBER
entryRuleNUMBER returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNUMBERRule()); }
	iv_ruleNUMBER=ruleNUMBER
	{ $current=$iv_ruleNUMBER.current.getText(); }
	EOF;

// Rule NUMBER
ruleNUMBER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getNUMBERAccess().getINTTerminalRuleCall_0());
		}
		    |
		(
			this_INT_1=RULE_INT
			{
				$current.merge(this_INT_1);
			}
			{
				newLeafNode(this_INT_1, grammarAccess.getNUMBERAccess().getINTTerminalRuleCall_1_0());
			}
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNUMBERAccess().getFullStopKeyword_1_1());
			}
			this_INT_3=RULE_INT
			{
				$current.merge(this_INT_3);
			}
			{
				newLeafNode(this_INT_3, grammarAccess.getNUMBERAccess().getINTTerminalRuleCall_1_2());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
