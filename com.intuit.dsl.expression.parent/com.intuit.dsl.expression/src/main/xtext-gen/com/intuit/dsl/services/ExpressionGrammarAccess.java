/*
 * generated by Xtext 2.25.0
 */
package com.intuit.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ExpressionGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.Expression");
		private final RuleCall cBooleanExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression returns Expression:
		//  BooleanExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//BooleanExpression
		public RuleCall getBooleanExpressionParserRuleCall() { return cBooleanExpressionParserRuleCall; }
	}
	public class BooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.BooleanExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cBooleanExpressionLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_1_0 = (Alternatives)cOpAssignment_1_0_1.eContents().get(0);
		private final Keyword cOpVerticalLineVerticalLineKeyword_1_0_1_0_0 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(0);
		private final Keyword cOpAmpersandAmpersandKeyword_1_0_1_0_1 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(1);
		private final Keyword cOpAndKeyword_1_0_1_0_2 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(2);
		private final Keyword cOpOrKeyword_1_0_1_0_3 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightComparisonParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//BooleanExpression returns Expression:
		//  Comparison
		//  (({BooleanExpression.left=current} op=("||"|"&&"|"and"|"or")) right=Comparison)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Comparison
		//(({BooleanExpression.left=current} op=("||"|"&&"|"and"|"or")) right=Comparison)*
		public Group getGroup() { return cGroup; }
		
		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }
		
		//(({BooleanExpression.left=current} op=("||"|"&&"|"and"|"or")) right=Comparison)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({BooleanExpression.left=current} op=("||"|"&&"|"and"|"or"))
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{BooleanExpression.left=current}
		public Action getBooleanExpressionLeftAction_1_0_0() { return cBooleanExpressionLeftAction_1_0_0; }
		
		//op=("||"|"&&"|"and"|"or")
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//("||"|"&&"|"and"|"or")
		public Alternatives getOpAlternatives_1_0_1_0() { return cOpAlternatives_1_0_1_0; }
		
		//"||"
		public Keyword getOpVerticalLineVerticalLineKeyword_1_0_1_0_0() { return cOpVerticalLineVerticalLineKeyword_1_0_1_0_0; }
		
		//"&&"
		public Keyword getOpAmpersandAmpersandKeyword_1_0_1_0_1() { return cOpAmpersandAmpersandKeyword_1_0_1_0_1; }
		
		//"and"
		public Keyword getOpAndKeyword_1_0_1_0_2() { return cOpAndKeyword_1_0_1_0_2; }
		
		//"or"
		public Keyword getOpOrKeyword_1_0_1_0_3() { return cOpOrKeyword_1_0_1_0_3; }
		
		//right=Comparison
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Comparison
		public RuleCall getRightComparisonParserRuleCall_1_1_0() { return cRightComparisonParserRuleCall_1_1_0; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMembershipParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cComparisonLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_1_0 = (Alternatives)cOpAssignment_1_0_1.eContents().get(0);
		private final Keyword cOpLessThanSignKeyword_1_0_1_0_0 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(0);
		private final Keyword cOpGreaterThanSignKeyword_1_0_1_0_1 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(1);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_0_1_0_2 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(2);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_0_1_0_3 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMembershipParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Comparison returns Expression:
		//  Membership
		//  (({Comparison.left=current} op=("<" | ">" | "<=" | ">=")) right=Membership)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Membership
		//(({Comparison.left=current} op=("<" | ">" | "<=" | ">=")) right=Membership)*
		public Group getGroup() { return cGroup; }
		
		//Membership
		public RuleCall getMembershipParserRuleCall_0() { return cMembershipParserRuleCall_0; }
		
		//(({Comparison.left=current} op=("<" | ">" | "<=" | ">=")) right=Membership)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Comparison.left=current} op=("<" | ">" | "<=" | ">="))
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Comparison.left=current}
		public Action getComparisonLeftAction_1_0_0() { return cComparisonLeftAction_1_0_0; }
		
		//op=("<" | ">" | "<=" | ">=")
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//("<" | ">" | "<=" | ">=")
		public Alternatives getOpAlternatives_1_0_1_0() { return cOpAlternatives_1_0_1_0; }
		
		//"<"
		public Keyword getOpLessThanSignKeyword_1_0_1_0_0() { return cOpLessThanSignKeyword_1_0_1_0_0; }
		
		//">"
		public Keyword getOpGreaterThanSignKeyword_1_0_1_0_1() { return cOpGreaterThanSignKeyword_1_0_1_0_1; }
		
		//"<="
		public Keyword getOpLessThanSignEqualsSignKeyword_1_0_1_0_2() { return cOpLessThanSignEqualsSignKeyword_1_0_1_0_2; }
		
		//">="
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_0_1_0_3() { return cOpGreaterThanSignEqualsSignKeyword_1_0_1_0_3; }
		
		//right=Membership
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Membership
		public RuleCall getRightMembershipParserRuleCall_1_1_0() { return cRightMembershipParserRuleCall_1_1_0; }
	}
	public class MembershipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.Membership");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualsParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cMembershipLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_1_0 = (Alternatives)cOpAssignment_1_0_1.eContents().get(0);
		private final Keyword cOpInKeyword_1_0_1_0_0 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(0);
		private final Keyword cOpNot_inKeyword_1_0_1_0_1 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cCommaKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cRightAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cRightExpressionParserRuleCall_1_3_1_0 = (RuleCall)cRightAssignment_1_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//Membership returns Expression:
		//  Equals
		//  (({Membership.left=current} op=("in" | "not_in")) "[" right+=Expression(',' right+=Expression)* "]")*;
		@Override public ParserRule getRule() { return rule; }
		
		//Equals
		//(({Membership.left=current} op=("in" | "not_in")) "[" right+=Expression(',' right+=Expression)* "]")*
		public Group getGroup() { return cGroup; }
		
		//Equals
		public RuleCall getEqualsParserRuleCall_0() { return cEqualsParserRuleCall_0; }
		
		//(({Membership.left=current} op=("in" | "not_in")) "[" right+=Expression(',' right+=Expression)* "]")*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Membership.left=current} op=("in" | "not_in"))
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Membership.left=current}
		public Action getMembershipLeftAction_1_0_0() { return cMembershipLeftAction_1_0_0; }
		
		//op=("in" | "not_in")
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//("in" | "not_in")
		public Alternatives getOpAlternatives_1_0_1_0() { return cOpAlternatives_1_0_1_0; }
		
		//"in"
		public Keyword getOpInKeyword_1_0_1_0_0() { return cOpInKeyword_1_0_1_0_0; }
		
		//"not_in"
		public Keyword getOpNot_inKeyword_1_0_1_0_1() { return cOpNot_inKeyword_1_0_1_0_1; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1_1() { return cLeftSquareBracketKeyword_1_1; }
		
		//right+=Expression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_1_2_0() { return cRightExpressionParserRuleCall_1_2_0; }
		
		//(',' right+=Expression)*
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//','
		public Keyword getCommaKeyword_1_3_0() { return cCommaKeyword_1_3_0; }
		
		//right+=Expression
		public Assignment getRightAssignment_1_3_1() { return cRightAssignment_1_3_1; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_1_3_1_0() { return cRightExpressionParserRuleCall_1_3_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_1_4() { return cRightSquareBracketKeyword_1_4; }
	}
	public class EqualsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.Equals");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cEqualsLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_1_0 = (Alternatives)cOpAssignment_1_0_1.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_0_1_0_0 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_0_1_0_1 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(1);
		private final Keyword cOpEqualsSignTildeKeyword_1_0_1_0_2 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(2);
		private final Keyword cOpExclamationMarkTildeKeyword_1_0_1_0_3 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(3);
		private final Keyword cOpIsKeyword_1_0_1_0_4 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(4);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAdditionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Equals returns Expression:
		//  Addition
		//  (({Equals.left=current} op=("==" | "!=" | "=~" | "!~" | "is")) right=Addition)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Addition
		//(({Equals.left=current} op=("==" | "!=" | "=~" | "!~" | "is")) right=Addition)*
		public Group getGroup() { return cGroup; }
		
		//Addition
		public RuleCall getAdditionParserRuleCall_0() { return cAdditionParserRuleCall_0; }
		
		//(({Equals.left=current} op=("==" | "!=" | "=~" | "!~" | "is")) right=Addition)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Equals.left=current} op=("==" | "!=" | "=~" | "!~" | "is"))
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Equals.left=current}
		public Action getEqualsLeftAction_1_0_0() { return cEqualsLeftAction_1_0_0; }
		
		//op=("==" | "!=" | "=~" | "!~" | "is")
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//("==" | "!=" | "=~" | "!~" | "is")
		public Alternatives getOpAlternatives_1_0_1_0() { return cOpAlternatives_1_0_1_0; }
		
		//"=="
		public Keyword getOpEqualsSignEqualsSignKeyword_1_0_1_0_0() { return cOpEqualsSignEqualsSignKeyword_1_0_1_0_0; }
		
		//"!="
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_0_1_0_1() { return cOpExclamationMarkEqualsSignKeyword_1_0_1_0_1; }
		
		//"=~"
		public Keyword getOpEqualsSignTildeKeyword_1_0_1_0_2() { return cOpEqualsSignTildeKeyword_1_0_1_0_2; }
		
		//"!~"
		public Keyword getOpExclamationMarkTildeKeyword_1_0_1_0_3() { return cOpExclamationMarkTildeKeyword_1_0_1_0_3; }
		
		//"is"
		public Keyword getOpIsKeyword_1_0_1_0_4() { return cOpIsKeyword_1_0_1_0_4; }
		
		//right=Addition
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Addition
		public RuleCall getRightAdditionParserRuleCall_1_1_0() { return cRightAdditionParserRuleCall_1_1_0; }
	}
	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0 = (Alternatives)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cAlternatives_1_0_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0_0 = (Action)cGroup_1_0_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_0_1 = (Keyword)cGroup_1_0_0_0.eContents().get(1);
		private final Group cGroup_1_0_0_1 = (Group)cAlternatives_1_0_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_0_1_0 = (Action)cGroup_1_0_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_0_1_1 = (Keyword)cGroup_1_0_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplicationParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Addition returns Expression:
		//  Multiplication
		//  (=>({Plus.left=current} '+' | {Minus.left=current} '-')
		//  right=Multiplication)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Multiplication
		//(=>({Plus.left=current} '+' | {Minus.left=current} '-')
		//right=Multiplication)*
		public Group getGroup() { return cGroup; }
		
		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }
		
		//(=>({Plus.left=current} '+' | {Minus.left=current} '-')
		//right=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=>({Plus.left=current} '+' | {Minus.left=current} '-')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Plus.left=current} '+' | {Minus.left=current} '-'
		public Alternatives getAlternatives_1_0_0() { return cAlternatives_1_0_0; }
		
		//{Plus.left=current} '+'
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0_0() { return cPlusLeftAction_1_0_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_0_1() { return cPlusSignKeyword_1_0_0_0_1; }
		
		//{Minus.left=current} '-'
		public Group getGroup_1_0_0_1() { return cGroup_1_0_0_1; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_0_1_0() { return cMinusLeftAction_1_0_0_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_0_1_1() { return cHyphenMinusKeyword_1_0_0_1_1; }
		
		//right=Multiplication
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_1_0() { return cRightMultiplicationParserRuleCall_1_1_0; }
	}
	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrefixedParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cMultiOrDivOrModLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_1_0 = (Alternatives)cOpAssignment_1_0_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_0_1_0_0 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_0_1_0_1 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(1);
		private final Keyword cOpPercentSignKeyword_1_0_1_0_2 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(2);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrefixedParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Multiplication returns Expression:
		//  Prefixed
		//  (({MultiOrDivOrMod.left=current} op=("*"|"/"|"%")) right=Prefixed)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Prefixed
		//(({MultiOrDivOrMod.left=current} op=("*"|"/"|"%")) right=Prefixed)*
		public Group getGroup() { return cGroup; }
		
		//Prefixed
		public RuleCall getPrefixedParserRuleCall_0() { return cPrefixedParserRuleCall_0; }
		
		//(({MultiOrDivOrMod.left=current} op=("*"|"/"|"%")) right=Prefixed)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({MultiOrDivOrMod.left=current} op=("*"|"/"|"%"))
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{MultiOrDivOrMod.left=current}
		public Action getMultiOrDivOrModLeftAction_1_0_0() { return cMultiOrDivOrModLeftAction_1_0_0; }
		
		//op=("*"|"/"|"%")
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//("*"|"/"|"%")
		public Alternatives getOpAlternatives_1_0_1_0() { return cOpAlternatives_1_0_1_0; }
		
		//"*"
		public Keyword getOpAsteriskKeyword_1_0_1_0_0() { return cOpAsteriskKeyword_1_0_1_0_0; }
		
		//"/"
		public Keyword getOpSolidusKeyword_1_0_1_0_1() { return cOpSolidusKeyword_1_0_1_0_1; }
		
		//"%"
		public Keyword getOpPercentSignKeyword_1_0_1_0_2() { return cOpPercentSignKeyword_1_0_1_0_2; }
		
		//right=Prefixed
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Prefixed
		public RuleCall getRightPrefixedParserRuleCall_1_1_0() { return cRightPrefixedParserRuleCall_1_1_0; }
	}
	public class PrefixedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.Prefixed");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBooleanNegationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExpressionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpressionAtomicParserRuleCall_0_2_0 = (RuleCall)cExpressionAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cArithmeticSignedAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionAtomicParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final RuleCall cAtomicParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Prefixed returns Expression:
		//  {BooleanNegation} "!" expression=Atomic | /* right associativity */
		//  {ArithmeticSigned} '-' expression=Atomic | /* right associativity */
		//  Atomic;
		@Override public ParserRule getRule() { return rule; }
		
		//{BooleanNegation} "!" expression=Atomic | /* right associativity */
		//{ArithmeticSigned} '-' expression=Atomic | /* right associativity */
		//Atomic
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{BooleanNegation} "!" expression=Atomic
		public Group getGroup_0() { return cGroup_0; }
		
		//{BooleanNegation}
		public Action getBooleanNegationAction_0_0() { return cBooleanNegationAction_0_0; }
		
		//"!"
		public Keyword getExclamationMarkKeyword_0_1() { return cExclamationMarkKeyword_0_1; }
		
		//expression=Atomic
		public Assignment getExpressionAssignment_0_2() { return cExpressionAssignment_0_2; }
		
		//Atomic
		public RuleCall getExpressionAtomicParserRuleCall_0_2_0() { return cExpressionAtomicParserRuleCall_0_2_0; }
		
		///* right associativity */
		// {ArithmeticSigned} '-' expression=Atomic
		public Group getGroup_1() { return cGroup_1; }
		
		///* right associativity */
		// {ArithmeticSigned}
		public Action getArithmeticSignedAction_1_0() { return cArithmeticSignedAction_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }
		
		//expression=Atomic
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//Atomic
		public RuleCall getExpressionAtomicParserRuleCall_1_2_0() { return cExpressionAtomicParserRuleCall_1_2_0; }
		
		///* right associativity */
		// Atomic
		public RuleCall getAtomicParserRuleCall_2() { return cAtomicParserRuleCall_2; }
	}
	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTernaryExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cArrayExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cParenthesizedExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cFunctionReferenceAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cRefAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cRefFunctionParserRuleCall_4_1_0 = (RuleCall)cRefAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cVariableReferenceAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cRefAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cRefVariableParserRuleCall_5_1_0 = (RuleCall)cRefAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cPropertyExpresssionAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cRefAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cRefPropertyParserRuleCall_6_1_0 = (RuleCall)cRefAssignment_6_1.eContents().get(0);
		
		//  //TODO: unary addition operator can be supported in ArithmeticSigned
		//Atomic returns Expression:
		//  LiteralExpression |
		//  TernaryExpression |
		//  ArrayExpression |
		//  ParenthesizedExpression |
		//  {FunctionReference} ref=Function |
		//  {VariableReference} ref=Variable |
		//  {PropertyExpresssion} ref=Property
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//LiteralExpression |
		//TernaryExpression |
		//ArrayExpression |
		//ParenthesizedExpression |
		//{FunctionReference} ref=Function |
		//{VariableReference} ref=Variable |
		//{PropertyExpresssion} ref=Property
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LiteralExpression
		public RuleCall getLiteralExpressionParserRuleCall_0() { return cLiteralExpressionParserRuleCall_0; }
		
		//TernaryExpression
		public RuleCall getTernaryExpressionParserRuleCall_1() { return cTernaryExpressionParserRuleCall_1; }
		
		//ArrayExpression
		public RuleCall getArrayExpressionParserRuleCall_2() { return cArrayExpressionParserRuleCall_2; }
		
		//ParenthesizedExpression
		public RuleCall getParenthesizedExpressionParserRuleCall_3() { return cParenthesizedExpressionParserRuleCall_3; }
		
		//{FunctionReference} ref=Function
		public Group getGroup_4() { return cGroup_4; }
		
		//{FunctionReference}
		public Action getFunctionReferenceAction_4_0() { return cFunctionReferenceAction_4_0; }
		
		//ref=Function
		public Assignment getRefAssignment_4_1() { return cRefAssignment_4_1; }
		
		//Function
		public RuleCall getRefFunctionParserRuleCall_4_1_0() { return cRefFunctionParserRuleCall_4_1_0; }
		
		//{VariableReference} ref=Variable
		public Group getGroup_5() { return cGroup_5; }
		
		//{VariableReference}
		public Action getVariableReferenceAction_5_0() { return cVariableReferenceAction_5_0; }
		
		//ref=Variable
		public Assignment getRefAssignment_5_1() { return cRefAssignment_5_1; }
		
		//Variable
		public RuleCall getRefVariableParserRuleCall_5_1_0() { return cRefVariableParserRuleCall_5_1_0; }
		
		//{PropertyExpresssion} ref=Property
		public Group getGroup_6() { return cGroup_6; }
		
		//{PropertyExpresssion}
		public Action getPropertyExpresssionAction_6_0() { return cPropertyExpresssionAction_6_0; }
		
		//ref=Property
		public Assignment getRefAssignment_6_1() { return cRefAssignment_6_1; }
		
		//Property
		public RuleCall getRefPropertyParserRuleCall_6_1_0() { return cRefPropertyParserRuleCall_6_1_0; }
	}
	public class LiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.LiteralExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNumberLiteralAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueNUMBERParserRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cStringLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cNullLiteralAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cValueNullKeyword_2_1_0 = (Keyword)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cBooleanLiteralAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Alternatives cValueAlternatives_3_1_0 = (Alternatives)cValueAssignment_3_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_3_1_0_0 = (Keyword)cValueAlternatives_3_1_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_3_1_0_1 = (Keyword)cValueAlternatives_3_1_0.eContents().get(1);
		
		//LiteralExpression:
		//  {NumberLiteral} value=NUMBER |
		//  {StringLiteral} value=STRING |
		//  {NullLiteral} value= 'null' |
		//  {BooleanLiteral} value=('true'|'false')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{NumberLiteral} value=NUMBER |
		//{StringLiteral} value=STRING |
		//{NullLiteral} value= 'null' |
		//{BooleanLiteral} value=('true'|'false')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{NumberLiteral} value=NUMBER
		public Group getGroup_0() { return cGroup_0; }
		
		//{NumberLiteral}
		public Action getNumberLiteralAction_0_0() { return cNumberLiteralAction_0_0; }
		
		//value=NUMBER
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//NUMBER
		public RuleCall getValueNUMBERParserRuleCall_0_1_0() { return cValueNUMBERParserRuleCall_0_1_0; }
		
		//{StringLiteral} value=STRING
		public Group getGroup_1() { return cGroup_1; }
		
		//{StringLiteral}
		public Action getStringLiteralAction_1_0() { return cStringLiteralAction_1_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_1_0() { return cValueSTRINGTerminalRuleCall_1_1_0; }
		
		//{NullLiteral} value= 'null'
		public Group getGroup_2() { return cGroup_2; }
		
		//{NullLiteral}
		public Action getNullLiteralAction_2_0() { return cNullLiteralAction_2_0; }
		
		//value= 'null'
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//'null'
		public Keyword getValueNullKeyword_2_1_0() { return cValueNullKeyword_2_1_0; }
		
		//{BooleanLiteral} value=('true'|'false')
		public Group getGroup_3() { return cGroup_3; }
		
		//{BooleanLiteral}
		public Action getBooleanLiteralAction_3_0() { return cBooleanLiteralAction_3_0; }
		
		//value=('true'|'false')
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//('true'|'false')
		public Alternatives getValueAlternatives_3_1_0() { return cValueAlternatives_3_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_3_1_0_0() { return cValueTrueKeyword_3_1_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_3_1_0_1() { return cValueFalseKeyword_3_1_0_1; }
	}
	public class TernaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.TernaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionBooleanExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTruevalueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTruevalueAtomicParserRuleCall_3_0 = (RuleCall)cTruevalueAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElseKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cFalsevalueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cFalsevalueAtomicParserRuleCall_4_1_0 = (RuleCall)cFalsevalueAssignment_4_1.eContents().get(0);
		
		//TernaryExpression:
		//  'if' expression=BooleanExpression
		//  'then' truevalue=Atomic
		//  (=>'else' falsevalue=Atomic)?
		//  /**
		//   * Breaking change: the dangling else is now part of inner if condition.
		//   * Breaking change: Only atomic expressions are part of then and else statements
		//   */
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' expression=BooleanExpression
		//'then' truevalue=Atomic
		//(=>'else' falsevalue=Atomic)?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//expression=BooleanExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//BooleanExpression
		public RuleCall getExpressionBooleanExpressionParserRuleCall_1_0() { return cExpressionBooleanExpressionParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//truevalue=Atomic
		public Assignment getTruevalueAssignment_3() { return cTruevalueAssignment_3; }
		
		//Atomic
		public RuleCall getTruevalueAtomicParserRuleCall_3_0() { return cTruevalueAtomicParserRuleCall_3_0; }
		
		//(=>'else' falsevalue=Atomic)?
		public Group getGroup_4() { return cGroup_4; }
		
		//=>'else'
		public Keyword getElseKeyword_4_0() { return cElseKeyword_4_0; }
		
		//falsevalue=Atomic
		public Assignment getFalsevalueAssignment_4_1() { return cFalsevalueAssignment_4_1; }
		
		//Atomic
		public RuleCall getFalsevalueAtomicParserRuleCall_4_1_0() { return cFalsevalueAtomicParserRuleCall_4_1_0; }
	}
	public class ArrayExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.ArrayExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArrayExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExpressionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_3_1_0 = (RuleCall)cExpressionAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ArrayExpression returns Expression:
		//    {ArrayExpression} '[' expression+=Expression(',' expression+=Expression)* ']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ArrayExpression} '[' expression+=Expression(',' expression+=Expression)* ']'
		public Group getGroup() { return cGroup; }
		
		//{ArrayExpression}
		public Action getArrayExpressionAction_0() { return cArrayExpressionAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//expression+=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
		
		//(',' expression+=Expression)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//expression+=Expression
		public Assignment getExpressionAssignment_3_1() { return cExpressionAssignment_3_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_1_0() { return cExpressionExpressionParserRuleCall_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class ParenthesizedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.ParenthesizedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ParenthesizedExpression returns Expression:
		//    '(' Expression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.Function");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCollectionFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJoinParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLengthParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDateFormatParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDeleteParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cContainsParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDayDifferenceParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cCurrentDateParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cPickFirstParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cExtractParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cTranslateUnicodeParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cAddToDateParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cUUIDFuncParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cLowerFuncParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cUpperFuncParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		
		//Function:
		//  CollectionFunction | Join | Length | DateFormat | Delete | Contains | DayDifference | CurrentDate | PickFirst | Extract | TranslateUnicode | AddToDate | UUIDFunc | LowerFunc | UpperFunc
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//CollectionFunction | Join | Length | DateFormat | Delete | Contains | DayDifference | CurrentDate | PickFirst | Extract | TranslateUnicode | AddToDate | UUIDFunc | LowerFunc | UpperFunc
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CollectionFunction
		public RuleCall getCollectionFunctionParserRuleCall_0() { return cCollectionFunctionParserRuleCall_0; }
		
		//Join
		public RuleCall getJoinParserRuleCall_1() { return cJoinParserRuleCall_1; }
		
		//Length
		public RuleCall getLengthParserRuleCall_2() { return cLengthParserRuleCall_2; }
		
		//DateFormat
		public RuleCall getDateFormatParserRuleCall_3() { return cDateFormatParserRuleCall_3; }
		
		//Delete
		public RuleCall getDeleteParserRuleCall_4() { return cDeleteParserRuleCall_4; }
		
		//Contains
		public RuleCall getContainsParserRuleCall_5() { return cContainsParserRuleCall_5; }
		
		//DayDifference
		public RuleCall getDayDifferenceParserRuleCall_6() { return cDayDifferenceParserRuleCall_6; }
		
		//CurrentDate
		public RuleCall getCurrentDateParserRuleCall_7() { return cCurrentDateParserRuleCall_7; }
		
		//PickFirst
		public RuleCall getPickFirstParserRuleCall_8() { return cPickFirstParserRuleCall_8; }
		
		//Extract
		public RuleCall getExtractParserRuleCall_9() { return cExtractParserRuleCall_9; }
		
		//TranslateUnicode
		public RuleCall getTranslateUnicodeParserRuleCall_10() { return cTranslateUnicodeParserRuleCall_10; }
		
		//AddToDate
		public RuleCall getAddToDateParserRuleCall_11() { return cAddToDateParserRuleCall_11; }
		
		//UUIDFunc
		public RuleCall getUUIDFuncParserRuleCall_12() { return cUUIDFuncParserRuleCall_12; }
		
		//LowerFunc
		public RuleCall getLowerFuncParserRuleCall_13() { return cLowerFuncParserRuleCall_13; }
		
		//UpperFunc
		public RuleCall getUpperFuncParserRuleCall_14() { return cUpperFuncParserRuleCall_14; }
	}
	public class CollectionFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.CollectionFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunctionCollectionFunctionCallParserRuleCall_0_0 = (RuleCall)cFunctionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRefexpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRefexpExpressionParserRuleCall_1_1_0 = (RuleCall)cRefexpAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cResultKeyAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cResultKeyKeyParserRuleCall_2_1_0 = (RuleCall)cResultKeyAssignment_2_1.eContents().get(0);
		
		//CollectionFunction:
		//  function=CollectionFunctionCall (=>'[' refexp=Expression ']')?('.'resultKey+=Key)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//function=CollectionFunctionCall (=>'[' refexp=Expression ']')?('.'resultKey+=Key)*
		public Group getGroup() { return cGroup; }
		
		//function=CollectionFunctionCall
		public Assignment getFunctionAssignment_0() { return cFunctionAssignment_0; }
		
		//CollectionFunctionCall
		public RuleCall getFunctionCollectionFunctionCallParserRuleCall_0_0() { return cFunctionCollectionFunctionCallParserRuleCall_0_0; }
		
		//(=>'[' refexp=Expression ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//=>'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//refexp=Expression
		public Assignment getRefexpAssignment_1_1() { return cRefexpAssignment_1_1; }
		
		//Expression
		public RuleCall getRefexpExpressionParserRuleCall_1_1_0() { return cRefexpExpressionParserRuleCall_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
		
		//('.'resultKey+=Key)*
		public Group getGroup_2() { return cGroup_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//resultKey+=Key
		public Assignment getResultKeyAssignment_2_1() { return cResultKeyAssignment_2_1; }
		
		//Key
		public RuleCall getResultKeyKeyParserRuleCall_2_1_0() { return cResultKeyKeyParserRuleCall_2_1_0; }
	}
	public class CollectionFunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.CollectionFunctionCall");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRemoveFuncParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFindFirstFuncParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFilterFuncParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMapFuncParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSplitParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cJsonParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cConcatFuncParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cSortFuncParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cDedupFuncParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cLastFuncParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cParentFuncParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		
		//CollectionFunctionCall:
		//  RemoveFunc | FindFirstFunc | FilterFunc | MapFunc | Split | Json | ConcatFunc | SortFunc | DedupFunc | LastFunc | ParentFunc
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//RemoveFunc | FindFirstFunc | FilterFunc | MapFunc | Split | Json | ConcatFunc | SortFunc | DedupFunc | LastFunc | ParentFunc
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RemoveFunc
		public RuleCall getRemoveFuncParserRuleCall_0() { return cRemoveFuncParserRuleCall_0; }
		
		//FindFirstFunc
		public RuleCall getFindFirstFuncParserRuleCall_1() { return cFindFirstFuncParserRuleCall_1; }
		
		//FilterFunc
		public RuleCall getFilterFuncParserRuleCall_2() { return cFilterFuncParserRuleCall_2; }
		
		//MapFunc
		public RuleCall getMapFuncParserRuleCall_3() { return cMapFuncParserRuleCall_3; }
		
		//Split
		public RuleCall getSplitParserRuleCall_4() { return cSplitParserRuleCall_4; }
		
		//Json
		public RuleCall getJsonParserRuleCall_5() { return cJsonParserRuleCall_5; }
		
		//ConcatFunc
		public RuleCall getConcatFuncParserRuleCall_6() { return cConcatFuncParserRuleCall_6; }
		
		//SortFunc
		public RuleCall getSortFuncParserRuleCall_7() { return cSortFuncParserRuleCall_7; }
		
		//DedupFunc
		public RuleCall getDedupFuncParserRuleCall_8() { return cDedupFuncParserRuleCall_8; }
		
		//LastFunc
		public RuleCall getLastFuncParserRuleCall_9() { return cLastFuncParserRuleCall_9; }
		
		//ParentFunc
		public RuleCall getParentFuncParserRuleCall_10() { return cParentFuncParserRuleCall_10; }
	}
	public class ParentFuncElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.ParentFunc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ParentFunc:
		//    'parent(' exp=Expression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'parent(' exp=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'parent('
		public Keyword getParentKeyword_0() { return cParentKeyword_0; }
		
		//exp=Expression
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_0() { return cExpExpressionParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class LastFuncElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.LastFunc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLastKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//LastFunc:
		//    'last(' exp=Expression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'last(' exp=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'last('
		public Keyword getLastKeyword_0() { return cLastKeyword_0; }
		
		//exp=Expression
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_0() { return cExpExpressionParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class DeleteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.Delete");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeleteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableVariableParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Delete:
		//  'delete(' variable = Variable ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'delete(' variable = Variable ')'
		public Group getGroup() { return cGroup; }
		
		//'delete('
		public Keyword getDeleteKeyword_0() { return cDeleteKeyword_0; }
		
		//variable = Variable
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_1_0() { return cVariableVariableParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class SplitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.Split");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSplitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRegexAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRegexSTRINGTerminalRuleCall_3_0 = (RuleCall)cRegexAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Split:
		//  'split('exp=Expression','regex=STRING')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'split('exp=Expression','regex=STRING')'
		public Group getGroup() { return cGroup; }
		
		//'split('
		public Keyword getSplitKeyword_0() { return cSplitKeyword_0; }
		
		//exp=Expression
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_0() { return cExpExpressionParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//regex=STRING
		public Assignment getRegexAssignment_3() { return cRegexAssignment_3; }
		
		//STRING
		public RuleCall getRegexSTRINGTerminalRuleCall_3_0() { return cRegexSTRINGTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ContainsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.Contains");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContainsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInputAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInputExpressionParserRuleCall_1_0 = (RuleCall)cInputAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSearchAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSearchExpressionParserRuleCall_3_0 = (RuleCall)cSearchAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Contains:
		//  'contains('input=Expression','search=Expression')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'contains('input=Expression','search=Expression')'
		public Group getGroup() { return cGroup; }
		
		//'contains('
		public Keyword getContainsKeyword_0() { return cContainsKeyword_0; }
		
		//input=Expression
		public Assignment getInputAssignment_1() { return cInputAssignment_1; }
		
		//Expression
		public RuleCall getInputExpressionParserRuleCall_1_0() { return cInputExpressionParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//search=Expression
		public Assignment getSearchAssignment_3() { return cSearchAssignment_3; }
		
		//Expression
		public RuleCall getSearchExpressionParserRuleCall_3_0() { return cSearchExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ExtractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.Extract");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtractKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInputAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInputExpressionParserRuleCall_1_0 = (RuleCall)cInputAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRangeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRangeRangeParserRuleCall_3_0 = (RuleCall)cRangeAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Extract:
		//  'extract('input=Expression','range=Range')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'extract('input=Expression','range=Range')'
		public Group getGroup() { return cGroup; }
		
		//'extract('
		public Keyword getExtractKeyword_0() { return cExtractKeyword_0; }
		
		//input=Expression
		public Assignment getInputAssignment_1() { return cInputAssignment_1; }
		
		//Expression
		public RuleCall getInputExpressionParserRuleCall_1_0() { return cInputExpressionParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//range=Range
		public Assignment getRangeAssignment_3() { return cRangeAssignment_3; }
		
		//Range
		public RuleCall getRangeRangeParserRuleCall_3_0() { return cRangeRangeParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class DateFormatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.DateFormat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDateFormatKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFromAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cFromAlternatives_2_0 = (Alternatives)cFromAssignment_2.eContents().get(0);
		private final Keyword cFromMMDdYyyyKeyword_2_0_0 = (Keyword)cFromAlternatives_2_0.eContents().get(0);
		private final Keyword cFromYyyyMMddKeyword_2_0_1 = (Keyword)cFromAlternatives_2_0.eContents().get(1);
		private final Keyword cFromYyyyMMDdKeyword_2_0_2 = (Keyword)cFromAlternatives_2_0.eContents().get(2);
		private final Keyword cFromMsKeyword_2_0_3 = (Keyword)cFromAlternatives_2_0.eContents().get(3);
		private final RuleCall cFromSTRINGTerminalRuleCall_2_0_4 = (RuleCall)cFromAlternatives_2_0.eContents().get(4);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cToAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cToAlternatives_4_0 = (Alternatives)cToAssignment_4.eContents().get(0);
		private final Keyword cToMMDdYyyyKeyword_4_0_0 = (Keyword)cToAlternatives_4_0.eContents().get(0);
		private final Keyword cToYyyyMMddKeyword_4_0_1 = (Keyword)cToAlternatives_4_0.eContents().get(1);
		private final Keyword cToYyyyMMDdKeyword_4_0_2 = (Keyword)cToAlternatives_4_0.eContents().get(2);
		private final Keyword cToMsKeyword_4_0_3 = (Keyword)cToAlternatives_4_0.eContents().get(3);
		private final RuleCall cToSTRINGTerminalRuleCall_4_0_4 = (RuleCall)cToAlternatives_4_0.eContents().get(4);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cExpAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cExpExpressionParserRuleCall_6_0 = (RuleCall)cExpAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//DateFormat:
		//  'dateFormat' '(' from=('\"MM/dd/yyyy\"' | '\"yyyyMMdd\"' | '\"yyyy-MM-dd\"' | '\"ms\"' | STRING) ',' to=('\"MM/dd/yyyy\"' | '\"yyyyMMdd\"' | '\"yyyy-MM-dd\"' | '\"ms\"' | STRING) ',' exp=Expression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'dateFormat' '(' from=('\"MM/dd/yyyy\"' | '\"yyyyMMdd\"' | '\"yyyy-MM-dd\"' | '\"ms\"' | STRING) ',' to=('\"MM/dd/yyyy\"' | '\"yyyyMMdd\"' | '\"yyyy-MM-dd\"' | '\"ms\"' | STRING) ',' exp=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'dateFormat'
		public Keyword getDateFormatKeyword_0() { return cDateFormatKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//from=('\"MM/dd/yyyy\"' | '\"yyyyMMdd\"' | '\"yyyy-MM-dd\"' | '\"ms\"' | STRING)
		public Assignment getFromAssignment_2() { return cFromAssignment_2; }
		
		//('\"MM/dd/yyyy\"' | '\"yyyyMMdd\"' | '\"yyyy-MM-dd\"' | '\"ms\"' | STRING)
		public Alternatives getFromAlternatives_2_0() { return cFromAlternatives_2_0; }
		
		//'\"MM/dd/yyyy\"'
		public Keyword getFromMMDdYyyyKeyword_2_0_0() { return cFromMMDdYyyyKeyword_2_0_0; }
		
		//'\"yyyyMMdd\"'
		public Keyword getFromYyyyMMddKeyword_2_0_1() { return cFromYyyyMMddKeyword_2_0_1; }
		
		//'\"yyyy-MM-dd\"'
		public Keyword getFromYyyyMMDdKeyword_2_0_2() { return cFromYyyyMMDdKeyword_2_0_2; }
		
		//'\"ms\"'
		public Keyword getFromMsKeyword_2_0_3() { return cFromMsKeyword_2_0_3; }
		
		//STRING
		public RuleCall getFromSTRINGTerminalRuleCall_2_0_4() { return cFromSTRINGTerminalRuleCall_2_0_4; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//to=('\"MM/dd/yyyy\"' | '\"yyyyMMdd\"' | '\"yyyy-MM-dd\"' | '\"ms\"' | STRING)
		public Assignment getToAssignment_4() { return cToAssignment_4; }
		
		//('\"MM/dd/yyyy\"' | '\"yyyyMMdd\"' | '\"yyyy-MM-dd\"' | '\"ms\"' | STRING)
		public Alternatives getToAlternatives_4_0() { return cToAlternatives_4_0; }
		
		//'\"MM/dd/yyyy\"'
		public Keyword getToMMDdYyyyKeyword_4_0_0() { return cToMMDdYyyyKeyword_4_0_0; }
		
		//'\"yyyyMMdd\"'
		public Keyword getToYyyyMMddKeyword_4_0_1() { return cToYyyyMMddKeyword_4_0_1; }
		
		//'\"yyyy-MM-dd\"'
		public Keyword getToYyyyMMDdKeyword_4_0_2() { return cToYyyyMMDdKeyword_4_0_2; }
		
		//'\"ms\"'
		public Keyword getToMsKeyword_4_0_3() { return cToMsKeyword_4_0_3; }
		
		//STRING
		public RuleCall getToSTRINGTerminalRuleCall_4_0_4() { return cToSTRINGTerminalRuleCall_4_0_4; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//exp=Expression
		public Assignment getExpAssignment_6() { return cExpAssignment_6; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_6_0() { return cExpExpressionParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class AddToDateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.AddToDate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddToDateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDateExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDateExpExpressionParserRuleCall_2_0 = (RuleCall)cDateExpAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFormatAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cFormatAlternatives_4_0 = (Alternatives)cFormatAssignment_4.eContents().get(0);
		private final Keyword cFormatMMDdYyyyKeyword_4_0_0 = (Keyword)cFormatAlternatives_4_0.eContents().get(0);
		private final Keyword cFormatYyyyMMddKeyword_4_0_1 = (Keyword)cFormatAlternatives_4_0.eContents().get(1);
		private final Keyword cFormatYyyyMMDdKeyword_4_0_2 = (Keyword)cFormatAlternatives_4_0.eContents().get(2);
		private final Keyword cFormatMsKeyword_4_0_3 = (Keyword)cFormatAlternatives_4_0.eContents().get(3);
		private final RuleCall cFormatSTRINGTerminalRuleCall_4_0_4 = (RuleCall)cFormatAlternatives_4_0.eContents().get(4);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cExpAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cExpExpressionParserRuleCall_6_0 = (RuleCall)cExpAssignment_6.eContents().get(0);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cTypeAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final Keyword cTypeDaysKeyword_8_0 = (Keyword)cTypeAssignment_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//AddToDate:
		//    'addToDate' '(' dateExp=Expression ',' format=('\"MM/dd/yyyy\"' | '\"yyyyMMdd\"' | '\"yyyy-MM-dd\"' | '\"ms\"' | STRING) ',' exp=Expression ',' type=('Days') ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'addToDate' '(' dateExp=Expression ',' format=('\"MM/dd/yyyy\"' | '\"yyyyMMdd\"' | '\"yyyy-MM-dd\"' | '\"ms\"' | STRING) ',' exp=Expression ',' type=('Days') ')'
		public Group getGroup() { return cGroup; }
		
		//'addToDate'
		public Keyword getAddToDateKeyword_0() { return cAddToDateKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//dateExp=Expression
		public Assignment getDateExpAssignment_2() { return cDateExpAssignment_2; }
		
		//Expression
		public RuleCall getDateExpExpressionParserRuleCall_2_0() { return cDateExpExpressionParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//format=('\"MM/dd/yyyy\"' | '\"yyyyMMdd\"' | '\"yyyy-MM-dd\"' | '\"ms\"' | STRING)
		public Assignment getFormatAssignment_4() { return cFormatAssignment_4; }
		
		//('\"MM/dd/yyyy\"' | '\"yyyyMMdd\"' | '\"yyyy-MM-dd\"' | '\"ms\"' | STRING)
		public Alternatives getFormatAlternatives_4_0() { return cFormatAlternatives_4_0; }
		
		//'\"MM/dd/yyyy\"'
		public Keyword getFormatMMDdYyyyKeyword_4_0_0() { return cFormatMMDdYyyyKeyword_4_0_0; }
		
		//'\"yyyyMMdd\"'
		public Keyword getFormatYyyyMMddKeyword_4_0_1() { return cFormatYyyyMMddKeyword_4_0_1; }
		
		//'\"yyyy-MM-dd\"'
		public Keyword getFormatYyyyMMDdKeyword_4_0_2() { return cFormatYyyyMMDdKeyword_4_0_2; }
		
		//'\"ms\"'
		public Keyword getFormatMsKeyword_4_0_3() { return cFormatMsKeyword_4_0_3; }
		
		//STRING
		public RuleCall getFormatSTRINGTerminalRuleCall_4_0_4() { return cFormatSTRINGTerminalRuleCall_4_0_4; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//exp=Expression
		public Assignment getExpAssignment_6() { return cExpAssignment_6; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_6_0() { return cExpExpressionParserRuleCall_6_0; }
		
		//','
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }
		
		//type=('Days')
		public Assignment getTypeAssignment_8() { return cTypeAssignment_8; }
		
		//('Days')
		public Keyword getTypeDaysKeyword_8_0() { return cTypeDaysKeyword_8_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
	}
	public class FilterFuncElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.FilterFunc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFilterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCondtionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCondtionBooleanExpressionParserRuleCall_3_0 = (RuleCall)cCondtionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FilterFunc:
		//  'filter('exp=Expression','condtion=BooleanExpression')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'filter('exp=Expression','condtion=BooleanExpression')'
		public Group getGroup() { return cGroup; }
		
		//'filter('
		public Keyword getFilterKeyword_0() { return cFilterKeyword_0; }
		
		//exp=Expression
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_0() { return cExpExpressionParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//condtion=BooleanExpression
		public Assignment getCondtionAssignment_3() { return cCondtionAssignment_3; }
		
		//BooleanExpression
		public RuleCall getCondtionBooleanExpressionParserRuleCall_3_0() { return cCondtionBooleanExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class FindFirstFuncElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.FindFirstFunc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFindFirstKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExpressionParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionBooleanExpressionParserRuleCall_4_0 = (RuleCall)cConditionAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//FindFirstFunc:
		//  'findFirst' '('exp=Expression',' condition=BooleanExpression')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'findFirst' '('exp=Expression',' condition=BooleanExpression')'
		public Group getGroup() { return cGroup; }
		
		//'findFirst'
		public Keyword getFindFirstKeyword_0() { return cFindFirstKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//exp=Expression
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_2_0() { return cExpExpressionParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//condition=BooleanExpression
		public Assignment getConditionAssignment_4() { return cConditionAssignment_4; }
		
		//BooleanExpression
		public RuleCall getConditionBooleanExpressionParserRuleCall_4_0() { return cConditionBooleanExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class RemoveFuncElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.RemoveFunc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRemoveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExpressionParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionBooleanExpressionParserRuleCall_4_0 = (RuleCall)cConditionAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//RemoveFunc:
		//  'remove' '(' exp=Expression ',' condition=BooleanExpression')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'remove' '(' exp=Expression ',' condition=BooleanExpression')'
		public Group getGroup() { return cGroup; }
		
		//'remove'
		public Keyword getRemoveKeyword_0() { return cRemoveKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//exp=Expression
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_2_0() { return cExpExpressionParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//condition=BooleanExpression
		public Assignment getConditionAssignment_4() { return cConditionAssignment_4; }
		
		//BooleanExpression
		public RuleCall getConditionBooleanExpressionParserRuleCall_4_0() { return cConditionBooleanExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class SortFuncElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.SortFunc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSortKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cKeyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cKeySchemaVariableParserRuleCall_3_0 = (RuleCall)cKeyAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTypeORDER_TYPEParserRuleCall_4_1_0 = (RuleCall)cTypeAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SortFunc:
		//  'sort('exp=Expression','key=SchemaVariable (','type=ORDER_TYPE)?')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'sort('exp=Expression','key=SchemaVariable (','type=ORDER_TYPE)?')'
		public Group getGroup() { return cGroup; }
		
		//'sort('
		public Keyword getSortKeyword_0() { return cSortKeyword_0; }
		
		//exp=Expression
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_0() { return cExpExpressionParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//key=SchemaVariable
		public Assignment getKeyAssignment_3() { return cKeyAssignment_3; }
		
		//SchemaVariable
		public RuleCall getKeySchemaVariableParserRuleCall_3_0() { return cKeySchemaVariableParserRuleCall_3_0; }
		
		//(','type=ORDER_TYPE)?
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//type=ORDER_TYPE
		public Assignment getTypeAssignment_4_1() { return cTypeAssignment_4_1; }
		
		//ORDER_TYPE
		public RuleCall getTypeORDER_TYPEParserRuleCall_4_1_0() { return cTypeORDER_TYPEParserRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class DedupFuncElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.DedupFunc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDedupKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cKeyAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cKeySchemaVariableParserRuleCall_2_1_0 = (RuleCall)cKeyAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DedupFunc:
		//  'dedup('exp=Expression (','key=SchemaVariable)?')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'dedup('exp=Expression (','key=SchemaVariable)?')'
		public Group getGroup() { return cGroup; }
		
		//'dedup('
		public Keyword getDedupKeyword_0() { return cDedupKeyword_0; }
		
		//exp=Expression
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_0() { return cExpExpressionParserRuleCall_1_0; }
		
		//(','key=SchemaVariable)?
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//key=SchemaVariable
		public Assignment getKeyAssignment_2_1() { return cKeyAssignment_2_1; }
		
		//SchemaVariable
		public RuleCall getKeySchemaVariableParserRuleCall_2_1_0() { return cKeySchemaVariableParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ORDER_TYPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.ORDER_TYPE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAscendingKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cDescendingKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ORDER_TYPE:
		//    'ascending' | 'descending'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'ascending' | 'descending'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'ascending'
		public Keyword getAscendingKeyword_0() { return cAscendingKeyword_0; }
		
		//'descending'
		public Keyword getDescendingKeyword_1() { return cDescendingKeyword_1; }
	}
	public class MapFuncElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.MapFunc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRangeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRangeRangeParserRuleCall_2_1_0 = (RuleCall)cRangeAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAliasKeyAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAliasKeyAllowedKeywordParserRuleCall_3_1_0 = (RuleCall)cAliasKeyAssignment_3_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cReturnexpAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cReturnexpExpressionParserRuleCall_5_0_0 = (RuleCall)cReturnexpAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cStatementAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cStatementMapStatementParserRuleCall_5_1_1_0 = (RuleCall)cStatementAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_1_2 = (Keyword)cGroup_5_1.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//MapFunc:
		//  'map('exp=Expression ("{"range=Range"}")? ('as' aliasKey=AllowedKeyword)? '->'(returnexp=Expression | '{'
		//   ((statement+=MapStatement)+)
		//      '}')
		//  ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'map('exp=Expression ("{"range=Range"}")? ('as' aliasKey=AllowedKeyword)? '->'(returnexp=Expression | '{'
		// ((statement+=MapStatement)+)
		//    '}')
		//')'
		public Group getGroup() { return cGroup; }
		
		//'map('
		public Keyword getMapKeyword_0() { return cMapKeyword_0; }
		
		//exp=Expression
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_0() { return cExpExpressionParserRuleCall_1_0; }
		
		//("{"range=Range"}")?
		public Group getGroup_2() { return cGroup_2; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//range=Range
		public Assignment getRangeAssignment_2_1() { return cRangeAssignment_2_1; }
		
		//Range
		public RuleCall getRangeRangeParserRuleCall_2_1_0() { return cRangeRangeParserRuleCall_2_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
		
		//('as' aliasKey=AllowedKeyword)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'as'
		public Keyword getAsKeyword_3_0() { return cAsKeyword_3_0; }
		
		//aliasKey=AllowedKeyword
		public Assignment getAliasKeyAssignment_3_1() { return cAliasKeyAssignment_3_1; }
		
		//AllowedKeyword
		public RuleCall getAliasKeyAllowedKeywordParserRuleCall_3_1_0() { return cAliasKeyAllowedKeywordParserRuleCall_3_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_4() { return cHyphenMinusGreaterThanSignKeyword_4; }
		
		//(returnexp=Expression | '{'
		//   ((statement+=MapStatement)+)
		//      '}')
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//returnexp=Expression
		public Assignment getReturnexpAssignment_5_0() { return cReturnexpAssignment_5_0; }
		
		//Expression
		public RuleCall getReturnexpExpressionParserRuleCall_5_0_0() { return cReturnexpExpressionParserRuleCall_5_0_0; }
		
		//'{'
		//  ((statement+=MapStatement)+)
		//     '}'
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1_0() { return cLeftCurlyBracketKeyword_5_1_0; }
		
		//((statement+=MapStatement)+)
		public Assignment getStatementAssignment_5_1_1() { return cStatementAssignment_5_1_1; }
		
		//MapStatement
		public RuleCall getStatementMapStatementParserRuleCall_5_1_1_0() { return cStatementMapStatementParserRuleCall_5_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_1_2() { return cRightCurlyBracketKeyword_5_1_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class RangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.Range");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLowAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLowExpressionParserRuleCall_0_0 = (RuleCall)cLowAssignment_0.eContents().get(0);
		private final Assignment cDiffAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cDiffFullStopFullStopKeyword_1_0 = (Keyword)cDiffAssignment_1.eContents().get(0);
		private final Assignment cHighAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cHighExpressionParserRuleCall_2_0 = (RuleCall)cHighAssignment_2.eContents().get(0);
		
		//Range:
		//  (low=Expression)? diff=".." (high=Expression)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(low=Expression)? diff=".." (high=Expression)?
		public Group getGroup() { return cGroup; }
		
		//(low=Expression)?
		public Assignment getLowAssignment_0() { return cLowAssignment_0; }
		
		//Expression
		public RuleCall getLowExpressionParserRuleCall_0_0() { return cLowExpressionParserRuleCall_0_0; }
		
		//diff=".."
		public Assignment getDiffAssignment_1() { return cDiffAssignment_1; }
		
		//".."
		public Keyword getDiffFullStopFullStopKeyword_1_0() { return cDiffFullStopFullStopKeyword_1_0; }
		
		//(high=Expression)?
		public Assignment getHighAssignment_2() { return cHighAssignment_2; }
		
		//Expression
		public RuleCall getHighExpressionParserRuleCall_2_0() { return cHighExpressionParserRuleCall_2_0; }
	}
	public class MapStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.MapStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResultKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cResultKeyKeyParserRuleCall_0_0 = (RuleCall)cResultKeyAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cResultKeyAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cResultKeyKeyParserRuleCall_1_1_0 = (RuleCall)cResultKeyAssignment_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpExpressionParserRuleCall_3_0 = (RuleCall)cExpAssignment_3.eContents().get(0);
		
		//MapStatement:
		//  resultKey+=Key('.'resultKey+=Key)* '=' exp=Expression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//resultKey+=Key('.'resultKey+=Key)* '=' exp=Expression
		public Group getGroup() { return cGroup; }
		
		//resultKey+=Key
		public Assignment getResultKeyAssignment_0() { return cResultKeyAssignment_0; }
		
		//Key
		public RuleCall getResultKeyKeyParserRuleCall_0_0() { return cResultKeyKeyParserRuleCall_0_0; }
		
		//('.'resultKey+=Key)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//resultKey+=Key
		public Assignment getResultKeyAssignment_1_1() { return cResultKeyAssignment_1_1; }
		
		//Key
		public RuleCall getResultKeyKeyParserRuleCall_1_1_0() { return cResultKeyKeyParserRuleCall_1_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//exp=Expression
		public Assignment getExpAssignment_3() { return cExpAssignment_3; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_3_0() { return cExpExpressionParserRuleCall_3_0; }
	}
	public class ConcatFuncElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.ConcatFunc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConcatKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_2_1_0 = (RuleCall)cExpAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ConcatFunc:
		//  'concat('exp+=Expression (','exp+=Expression)+ ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'concat('exp+=Expression (','exp+=Expression)+ ')'
		public Group getGroup() { return cGroup; }
		
		//'concat('
		public Keyword getConcatKeyword_0() { return cConcatKeyword_0; }
		
		//exp+=Expression
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_0() { return cExpExpressionParserRuleCall_1_0; }
		
		//(','exp+=Expression)+
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//exp+=Expression
		public Assignment getExpAssignment_2_1() { return cExpAssignment_2_1; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_2_1_0() { return cExpExpressionParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class LengthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.Length");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLengthKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Length:
		//  'length('exp=Expression')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'length('exp=Expression')'
		public Group getGroup() { return cGroup; }
		
		//'length('
		public Keyword getLengthKeyword_0() { return cLengthKeyword_0; }
		
		//exp=Expression
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_0() { return cExpExpressionParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class LowerFuncElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.LowerFunc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLowerCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//LowerFunc:
		//    'lowerCase('exp=Expression')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'lowerCase('exp=Expression')'
		public Group getGroup() { return cGroup; }
		
		//'lowerCase('
		public Keyword getLowerCaseKeyword_0() { return cLowerCaseKeyword_0; }
		
		//exp=Expression
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_0() { return cExpExpressionParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class UpperFuncElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.UpperFunc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUpperCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//UpperFunc:
		//    'upperCase('exp=Expression')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'upperCase('exp=Expression')'
		public Group getGroup() { return cGroup; }
		
		//'upperCase('
		public Keyword getUpperCaseKeyword_0() { return cUpperCaseKeyword_0; }
		
		//exp=Expression
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_0() { return cExpExpressionParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class UUIDFuncElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.UUIDFunc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUUIDFuncAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUuidKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//UUIDFunc:{UUIDFunc}
		//    'uuid()'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{UUIDFunc}
		//    'uuid()'
		public Group getGroup() { return cGroup; }
		
		//{UUIDFunc}
		public Action getUUIDFuncAction_0() { return cUUIDFuncAction_0; }
		
		//'uuid()'
		public Keyword getUuidKeyword_1() { return cUuidKeyword_1; }
	}
	public class JsonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.Json");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJsonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpSchemaVariableParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Json:
		//  'json('exp=SchemaVariable')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'json('exp=SchemaVariable')'
		public Group getGroup() { return cGroup; }
		
		//'json('
		public Keyword getJsonKeyword_0() { return cJsonKeyword_0; }
		
		//exp=SchemaVariable
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//SchemaVariable
		public RuleCall getExpSchemaVariableParserRuleCall_1_0() { return cExpSchemaVariableParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class JoinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.Join");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJoinKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cKeyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cKeyExpressionParserRuleCall_3_0 = (RuleCall)cKeyAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDelimiterAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDelimiterSTRINGTerminalRuleCall_5_0 = (RuleCall)cDelimiterAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cLastAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cLastSTRINGTerminalRuleCall_6_1_0 = (RuleCall)cLastAssignment_6_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Join:
		//    /**
		//     * Breaking change to make the `key` parameter non-optional
		//     */
		//  'join('exp=Expression ',' key=Expression ',' delimiter=STRING(','last=STRING)? ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  /**
		//   * Breaking change to make the `key` parameter non-optional
		//   */
		//'join('exp=Expression ',' key=Expression ',' delimiter=STRING(','last=STRING)? ')'
		public Group getGroup() { return cGroup; }
		
		//  /**
		//   * Breaking change to make the `key` parameter non-optional
		//   */
		//'join('
		public Keyword getJoinKeyword_0() { return cJoinKeyword_0; }
		
		//exp=Expression
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_0() { return cExpExpressionParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//key=Expression
		public Assignment getKeyAssignment_3() { return cKeyAssignment_3; }
		
		//Expression
		public RuleCall getKeyExpressionParserRuleCall_3_0() { return cKeyExpressionParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//delimiter=STRING
		public Assignment getDelimiterAssignment_5() { return cDelimiterAssignment_5; }
		
		//STRING
		public RuleCall getDelimiterSTRINGTerminalRuleCall_5_0() { return cDelimiterSTRINGTerminalRuleCall_5_0; }
		
		//(','last=STRING)?
		public Group getGroup_6() { return cGroup_6; }
		
		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//last=STRING
		public Assignment getLastAssignment_6_1() { return cLastAssignment_6_1; }
		
		//STRING
		public RuleCall getLastSTRINGTerminalRuleCall_6_1_0() { return cLastSTRINGTerminalRuleCall_6_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class DayDifferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.DayDifference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDayDifferenceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFromAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFromExpressionParserRuleCall_1_0 = (RuleCall)cFromAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cToAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cToExpressionParserRuleCall_3_0 = (RuleCall)cToAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFormatterAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Alternatives cFormatterAlternatives_5_0 = (Alternatives)cFormatterAssignment_5.eContents().get(0);
		private final Keyword cFormatterMMDdYyyyKeyword_5_0_0 = (Keyword)cFormatterAlternatives_5_0.eContents().get(0);
		private final Keyword cFormatterYyyyMMddKeyword_5_0_1 = (Keyword)cFormatterAlternatives_5_0.eContents().get(1);
		private final Keyword cFormatterYyyyMMDdKeyword_5_0_2 = (Keyword)cFormatterAlternatives_5_0.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//DayDifference:
		//  'dayDifference('from=Expression','to=Expression',' formatter=('\"MM/dd/yyyy\"' | '\"yyyyMMdd\"' | '\"yyyy-MM-dd\"') ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'dayDifference('from=Expression','to=Expression',' formatter=('\"MM/dd/yyyy\"' | '\"yyyyMMdd\"' | '\"yyyy-MM-dd\"') ')'
		public Group getGroup() { return cGroup; }
		
		//'dayDifference('
		public Keyword getDayDifferenceKeyword_0() { return cDayDifferenceKeyword_0; }
		
		//from=Expression
		public Assignment getFromAssignment_1() { return cFromAssignment_1; }
		
		//Expression
		public RuleCall getFromExpressionParserRuleCall_1_0() { return cFromExpressionParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//to=Expression
		public Assignment getToAssignment_3() { return cToAssignment_3; }
		
		//Expression
		public RuleCall getToExpressionParserRuleCall_3_0() { return cToExpressionParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//formatter=('\"MM/dd/yyyy\"' | '\"yyyyMMdd\"' | '\"yyyy-MM-dd\"')
		public Assignment getFormatterAssignment_5() { return cFormatterAssignment_5; }
		
		//('\"MM/dd/yyyy\"' | '\"yyyyMMdd\"' | '\"yyyy-MM-dd\"')
		public Alternatives getFormatterAlternatives_5_0() { return cFormatterAlternatives_5_0; }
		
		//'\"MM/dd/yyyy\"'
		public Keyword getFormatterMMDdYyyyKeyword_5_0_0() { return cFormatterMMDdYyyyKeyword_5_0_0; }
		
		//'\"yyyyMMdd\"'
		public Keyword getFormatterYyyyMMddKeyword_5_0_1() { return cFormatterYyyyMMddKeyword_5_0_1; }
		
		//'\"yyyy-MM-dd\"'
		public Keyword getFormatterYyyyMMDdKeyword_5_0_2() { return cFormatterYyyyMMDdKeyword_5_0_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class TranslateUnicodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.TranslateUnicode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTranslateUnicodeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//TranslateUnicode:
		//    'translateUnicode('exp=Expression')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'translateUnicode('exp=Expression')'
		public Group getGroup() { return cGroup; }
		
		//'translateUnicode('
		public Keyword getTranslateUnicodeKeyword_0() { return cTranslateUnicodeKeyword_0; }
		
		//exp=Expression
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_0() { return cExpExpressionParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class CurrentDateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.CurrentDate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCurrentDateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCurrentDateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFormatAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cFormatAlternatives_2_0 = (Alternatives)cFormatAssignment_2.eContents().get(0);
		private final Keyword cFormatMMDdYyyyKeyword_2_0_0 = (Keyword)cFormatAlternatives_2_0.eContents().get(0);
		private final Keyword cFormatYyyyMMddKeyword_2_0_1 = (Keyword)cFormatAlternatives_2_0.eContents().get(1);
		private final Keyword cFormatYyyyMMDdKeyword_2_0_2 = (Keyword)cFormatAlternatives_2_0.eContents().get(2);
		private final Keyword cFormatMsKeyword_2_0_3 = (Keyword)cFormatAlternatives_2_0.eContents().get(3);
		private final RuleCall cFormatSTRINGTerminalRuleCall_2_0_4 = (RuleCall)cFormatAlternatives_2_0.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CurrentDate:
		//    {CurrentDate} 'currentDate('format=('\"MM/dd/yyyy\"' | '\"yyyyMMdd\"' | '\"yyyy-MM-dd\"' | '\"ms\"' | STRING)?')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{CurrentDate} 'currentDate('format=('\"MM/dd/yyyy\"' | '\"yyyyMMdd\"' | '\"yyyy-MM-dd\"' | '\"ms\"' | STRING)?')'
		public Group getGroup() { return cGroup; }
		
		//{CurrentDate}
		public Action getCurrentDateAction_0() { return cCurrentDateAction_0; }
		
		//'currentDate('
		public Keyword getCurrentDateKeyword_1() { return cCurrentDateKeyword_1; }
		
		//format=('\"MM/dd/yyyy\"' | '\"yyyyMMdd\"' | '\"yyyy-MM-dd\"' | '\"ms\"' | STRING)?
		public Assignment getFormatAssignment_2() { return cFormatAssignment_2; }
		
		//('\"MM/dd/yyyy\"' | '\"yyyyMMdd\"' | '\"yyyy-MM-dd\"' | '\"ms\"' | STRING)
		public Alternatives getFormatAlternatives_2_0() { return cFormatAlternatives_2_0; }
		
		//'\"MM/dd/yyyy\"'
		public Keyword getFormatMMDdYyyyKeyword_2_0_0() { return cFormatMMDdYyyyKeyword_2_0_0; }
		
		//'\"yyyyMMdd\"'
		public Keyword getFormatYyyyMMddKeyword_2_0_1() { return cFormatYyyyMMddKeyword_2_0_1; }
		
		//'\"yyyy-MM-dd\"'
		public Keyword getFormatYyyyMMDdKeyword_2_0_2() { return cFormatYyyyMMDdKeyword_2_0_2; }
		
		//'\"ms\"'
		public Keyword getFormatMsKeyword_2_0_3() { return cFormatMsKeyword_2_0_3; }
		
		//STRING
		public RuleCall getFormatSTRINGTerminalRuleCall_2_0_4() { return cFormatSTRINGTerminalRuleCall_2_0_4; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class PickFirstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.PickFirst");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPickFirstKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_2_1_0 = (RuleCall)cExpAssignment_2_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionComparisonParserRuleCall_4_0 = (RuleCall)cConditionAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PickFirst:
		//  'pickFirst('exp+=Expression (','exp+=Expression)+ '->' condition=Comparison ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'pickFirst('exp+=Expression (','exp+=Expression)+ '->' condition=Comparison ')'
		public Group getGroup() { return cGroup; }
		
		//'pickFirst('
		public Keyword getPickFirstKeyword_0() { return cPickFirstKeyword_0; }
		
		//exp+=Expression
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_0() { return cExpExpressionParserRuleCall_1_0; }
		
		//(','exp+=Expression)+
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//exp+=Expression
		public Assignment getExpAssignment_2_1() { return cExpAssignment_2_1; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_2_1_0() { return cExpExpressionParserRuleCall_2_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//condition=Comparison
		public Assignment getConditionAssignment_4() { return cConditionAssignment_4; }
		
		//Comparison
		public RuleCall getConditionComparisonParserRuleCall_4_0() { return cConditionComparisonParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.Variable");
		private final Assignment cSchemaVariableAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSchemaVariableSchemaVariableParserRuleCall_0 = (RuleCall)cSchemaVariableAssignment.eContents().get(0);
		
		//Variable:
		//  schemaVariable=SchemaVariable
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//schemaVariable=SchemaVariable
		public Assignment getSchemaVariableAssignment() { return cSchemaVariableAssignment; }
		
		//SchemaVariable
		public RuleCall getSchemaVariableSchemaVariableParserRuleCall_0() { return cSchemaVariableSchemaVariableParserRuleCall_0; }
	}
	public class KeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.Key");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdAllowedKeywordParserRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_1_0 = (RuleCall)cExpAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Key:
		//  id=AllowedKeyword(=>'['exp=Expression']')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//id=AllowedKeyword(=>'['exp=Expression']')?
		public Group getGroup() { return cGroup; }
		
		//id=AllowedKeyword
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//AllowedKeyword
		public RuleCall getIdAllowedKeywordParserRuleCall_0_0() { return cIdAllowedKeywordParserRuleCall_0_0; }
		
		//(=>'['exp=Expression']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//=>'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//exp=Expression
		public Assignment getExpAssignment_1_1() { return cExpAssignment_1_1; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_1_0() { return cExpExpressionParserRuleCall_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}
	public class SchemaVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.SchemaVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cGlobalAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cGlobalColonColonKeyword_0_0 = (Keyword)cGlobalAssignment_0.eContents().get(0);
		private final Assignment cKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeyKeyParserRuleCall_1_0 = (RuleCall)cKeyAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cKeyAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cKeyKeyParserRuleCall_2_1_0 = (RuleCall)cKeyAssignment_2_1.eContents().get(0);
		
		//SchemaVariable:
		//  (global='::')?key+=Key('.'key+=Key)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(global='::')?key+=Key('.'key+=Key)*
		public Group getGroup() { return cGroup; }
		
		//(global='::')?
		public Assignment getGlobalAssignment_0() { return cGlobalAssignment_0; }
		
		//'::'
		public Keyword getGlobalColonColonKeyword_0_0() { return cGlobalColonColonKeyword_0_0; }
		
		//key+=Key
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }
		
		//Key
		public RuleCall getKeyKeyParserRuleCall_1_0() { return cKeyKeyParserRuleCall_1_0; }
		
		//('.'key+=Key)*
		public Group getGroup_2() { return cGroup_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//key+=Key
		public Assignment getKeyAssignment_2_1() { return cKeyAssignment_2_1; }
		
		//Key
		public RuleCall getKeyKeyParserRuleCall_2_1_0() { return cKeyKeyParserRuleCall_2_1_0; }
	}
	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConfigKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeySTRINGTerminalRuleCall_1_0 = (RuleCall)cKeyAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Property:
		//  '@Config('key=STRING')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'@Config('key=STRING')'
		public Group getGroup() { return cGroup; }
		
		//'@Config('
		public Keyword getConfigKeyword_0() { return cConfigKeyword_0; }
		
		//key=STRING
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }
		
		//STRING
		public RuleCall getKeySTRINGTerminalRuleCall_1_0() { return cKeySTRINGTerminalRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class AllowedKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.AllowedKeyword");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cLengthKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cFilterKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDeleteKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPathKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cItKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cFieldKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cDefaultKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cTemplateKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cUuidKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cParentKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cJsonKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cJoinKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cTranslateUnicodeKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cUpperCaseKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cLowerCaseKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cConcatKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		
		//AllowedKeyword: ID | 'length' | 'filter' | 'delete' | 'path' | 'it' | 'field' | 'default' | 'template' | 'uuid' | 'parent' | 'json'
		//    | 'join' | 'translateUnicode' | 'upperCase' | 'lowerCase' | 'concat'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | 'length' | 'filter' | 'delete' | 'path' | 'it' | 'field' | 'default' | 'template' | 'uuid' | 'parent' | 'json'
		//   | 'join' | 'translateUnicode' | 'upperCase' | 'lowerCase' | 'concat'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//'length'
		public Keyword getLengthKeyword_1() { return cLengthKeyword_1; }
		
		//'filter'
		public Keyword getFilterKeyword_2() { return cFilterKeyword_2; }
		
		//'delete'
		public Keyword getDeleteKeyword_3() { return cDeleteKeyword_3; }
		
		//'path'
		public Keyword getPathKeyword_4() { return cPathKeyword_4; }
		
		//'it'
		public Keyword getItKeyword_5() { return cItKeyword_5; }
		
		//'field'
		public Keyword getFieldKeyword_6() { return cFieldKeyword_6; }
		
		//'default'
		public Keyword getDefaultKeyword_7() { return cDefaultKeyword_7; }
		
		//'template'
		public Keyword getTemplateKeyword_8() { return cTemplateKeyword_8; }
		
		//'uuid'
		public Keyword getUuidKeyword_9() { return cUuidKeyword_9; }
		
		//'parent'
		public Keyword getParentKeyword_10() { return cParentKeyword_10; }
		
		//'json'
		public Keyword getJsonKeyword_11() { return cJsonKeyword_11; }
		
		//'join'
		public Keyword getJoinKeyword_12() { return cJoinKeyword_12; }
		
		//'translateUnicode'
		public Keyword getTranslateUnicodeKeyword_13() { return cTranslateUnicodeKeyword_13; }
		
		//'upperCase'
		public Keyword getUpperCaseKeyword_14() { return cUpperCaseKeyword_14; }
		
		//'lowerCase'
		public Keyword getLowerCaseKeyword_15() { return cLowerCaseKeyword_15; }
		
		//'concat'
		public Keyword getConcatKeyword_16() { return cConcatKeyword_16; }
	}
	public class NUMBERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.intuit.dsl.Expression.NUMBER");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//NUMBER returns ecore::EBigDecimal:
		//  INT | (INT '.' INT)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//INT | (INT '.' INT)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//(INT '.' INT)
		public Group getGroup_1() { return cGroup_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_0() { return cINTTerminalRuleCall_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_2() { return cINTTerminalRuleCall_1_2; }
	}
	
	
	private final ExpressionElements pExpression;
	private final BooleanExpressionElements pBooleanExpression;
	private final ComparisonElements pComparison;
	private final MembershipElements pMembership;
	private final EqualsElements pEquals;
	private final AdditionElements pAddition;
	private final MultiplicationElements pMultiplication;
	private final PrefixedElements pPrefixed;
	private final AtomicElements pAtomic;
	private final LiteralExpressionElements pLiteralExpression;
	private final TernaryExpressionElements pTernaryExpression;
	private final ArrayExpressionElements pArrayExpression;
	private final ParenthesizedExpressionElements pParenthesizedExpression;
	private final FunctionElements pFunction;
	private final CollectionFunctionElements pCollectionFunction;
	private final CollectionFunctionCallElements pCollectionFunctionCall;
	private final ParentFuncElements pParentFunc;
	private final LastFuncElements pLastFunc;
	private final DeleteElements pDelete;
	private final SplitElements pSplit;
	private final ContainsElements pContains;
	private final ExtractElements pExtract;
	private final DateFormatElements pDateFormat;
	private final AddToDateElements pAddToDate;
	private final FilterFuncElements pFilterFunc;
	private final FindFirstFuncElements pFindFirstFunc;
	private final RemoveFuncElements pRemoveFunc;
	private final SortFuncElements pSortFunc;
	private final DedupFuncElements pDedupFunc;
	private final ORDER_TYPEElements pORDER_TYPE;
	private final MapFuncElements pMapFunc;
	private final RangeElements pRange;
	private final MapStatementElements pMapStatement;
	private final ConcatFuncElements pConcatFunc;
	private final LengthElements pLength;
	private final LowerFuncElements pLowerFunc;
	private final UpperFuncElements pUpperFunc;
	private final UUIDFuncElements pUUIDFunc;
	private final JsonElements pJson;
	private final JoinElements pJoin;
	private final DayDifferenceElements pDayDifference;
	private final TranslateUnicodeElements pTranslateUnicode;
	private final CurrentDateElements pCurrentDate;
	private final PickFirstElements pPickFirst;
	private final VariableElements pVariable;
	private final KeyElements pKey;
	private final SchemaVariableElements pSchemaVariable;
	private final PropertyElements pProperty;
	private final AllowedKeywordElements pAllowedKeyword;
	private final NUMBERElements pNUMBER;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ExpressionGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pExpression = new ExpressionElements();
		this.pBooleanExpression = new BooleanExpressionElements();
		this.pComparison = new ComparisonElements();
		this.pMembership = new MembershipElements();
		this.pEquals = new EqualsElements();
		this.pAddition = new AdditionElements();
		this.pMultiplication = new MultiplicationElements();
		this.pPrefixed = new PrefixedElements();
		this.pAtomic = new AtomicElements();
		this.pLiteralExpression = new LiteralExpressionElements();
		this.pTernaryExpression = new TernaryExpressionElements();
		this.pArrayExpression = new ArrayExpressionElements();
		this.pParenthesizedExpression = new ParenthesizedExpressionElements();
		this.pFunction = new FunctionElements();
		this.pCollectionFunction = new CollectionFunctionElements();
		this.pCollectionFunctionCall = new CollectionFunctionCallElements();
		this.pParentFunc = new ParentFuncElements();
		this.pLastFunc = new LastFuncElements();
		this.pDelete = new DeleteElements();
		this.pSplit = new SplitElements();
		this.pContains = new ContainsElements();
		this.pExtract = new ExtractElements();
		this.pDateFormat = new DateFormatElements();
		this.pAddToDate = new AddToDateElements();
		this.pFilterFunc = new FilterFuncElements();
		this.pFindFirstFunc = new FindFirstFuncElements();
		this.pRemoveFunc = new RemoveFuncElements();
		this.pSortFunc = new SortFuncElements();
		this.pDedupFunc = new DedupFuncElements();
		this.pORDER_TYPE = new ORDER_TYPEElements();
		this.pMapFunc = new MapFuncElements();
		this.pRange = new RangeElements();
		this.pMapStatement = new MapStatementElements();
		this.pConcatFunc = new ConcatFuncElements();
		this.pLength = new LengthElements();
		this.pLowerFunc = new LowerFuncElements();
		this.pUpperFunc = new UpperFuncElements();
		this.pUUIDFunc = new UUIDFuncElements();
		this.pJson = new JsonElements();
		this.pJoin = new JoinElements();
		this.pDayDifference = new DayDifferenceElements();
		this.pTranslateUnicode = new TranslateUnicodeElements();
		this.pCurrentDate = new CurrentDateElements();
		this.pPickFirst = new PickFirstElements();
		this.pVariable = new VariableElements();
		this.pKey = new KeyElements();
		this.pSchemaVariable = new SchemaVariableElements();
		this.pProperty = new PropertyElements();
		this.pAllowedKeyword = new AllowedKeywordElements();
		this.pNUMBER = new NUMBERElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.intuit.dsl.Expression".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Expression returns Expression:
	//  BooleanExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//BooleanExpression returns Expression:
	//  Comparison
	//  (({BooleanExpression.left=current} op=("||"|"&&"|"and"|"or")) right=Comparison)*;
	public BooleanExpressionElements getBooleanExpressionAccess() {
		return pBooleanExpression;
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}
	
	//Comparison returns Expression:
	//  Membership
	//  (({Comparison.left=current} op=("<" | ">" | "<=" | ">=")) right=Membership)*;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//Membership returns Expression:
	//  Equals
	//  (({Membership.left=current} op=("in" | "not_in")) "[" right+=Expression(',' right+=Expression)* "]")*;
	public MembershipElements getMembershipAccess() {
		return pMembership;
	}
	
	public ParserRule getMembershipRule() {
		return getMembershipAccess().getRule();
	}
	
	//Equals returns Expression:
	//  Addition
	//  (({Equals.left=current} op=("==" | "!=" | "=~" | "!~" | "is")) right=Addition)*;
	public EqualsElements getEqualsAccess() {
		return pEquals;
	}
	
	public ParserRule getEqualsRule() {
		return getEqualsAccess().getRule();
	}
	
	//Addition returns Expression:
	//  Multiplication
	//  (=>({Plus.left=current} '+' | {Minus.left=current} '-')
	//  right=Multiplication)*;
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}
	
	//Multiplication returns Expression:
	//  Prefixed
	//  (({MultiOrDivOrMod.left=current} op=("*"|"/"|"%")) right=Prefixed)*;
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}
	
	//Prefixed returns Expression:
	//  {BooleanNegation} "!" expression=Atomic | /* right associativity */
	//  {ArithmeticSigned} '-' expression=Atomic | /* right associativity */
	//  Atomic;
	public PrefixedElements getPrefixedAccess() {
		return pPrefixed;
	}
	
	public ParserRule getPrefixedRule() {
		return getPrefixedAccess().getRule();
	}
	
	//  //TODO: unary addition operator can be supported in ArithmeticSigned
	//Atomic returns Expression:
	//  LiteralExpression |
	//  TernaryExpression |
	//  ArrayExpression |
	//  ParenthesizedExpression |
	//  {FunctionReference} ref=Function |
	//  {VariableReference} ref=Variable |
	//  {PropertyExpresssion} ref=Property
	//;
	public AtomicElements getAtomicAccess() {
		return pAtomic;
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}
	
	//LiteralExpression:
	//  {NumberLiteral} value=NUMBER |
	//  {StringLiteral} value=STRING |
	//  {NullLiteral} value= 'null' |
	//  {BooleanLiteral} value=('true'|'false')
	//;
	public LiteralExpressionElements getLiteralExpressionAccess() {
		return pLiteralExpression;
	}
	
	public ParserRule getLiteralExpressionRule() {
		return getLiteralExpressionAccess().getRule();
	}
	
	//TernaryExpression:
	//  'if' expression=BooleanExpression
	//  'then' truevalue=Atomic
	//  (=>'else' falsevalue=Atomic)?
	//  /**
	//   * Breaking change: the dangling else is now part of inner if condition.
	//   * Breaking change: Only atomic expressions are part of then and else statements
	//   */
	//;
	public TernaryExpressionElements getTernaryExpressionAccess() {
		return pTernaryExpression;
	}
	
	public ParserRule getTernaryExpressionRule() {
		return getTernaryExpressionAccess().getRule();
	}
	
	//ArrayExpression returns Expression:
	//    {ArrayExpression} '[' expression+=Expression(',' expression+=Expression)* ']'
	//;
	public ArrayExpressionElements getArrayExpressionAccess() {
		return pArrayExpression;
	}
	
	public ParserRule getArrayExpressionRule() {
		return getArrayExpressionAccess().getRule();
	}
	
	//ParenthesizedExpression returns Expression:
	//    '(' Expression ')'
	//;
	public ParenthesizedExpressionElements getParenthesizedExpressionAccess() {
		return pParenthesizedExpression;
	}
	
	public ParserRule getParenthesizedExpressionRule() {
		return getParenthesizedExpressionAccess().getRule();
	}
	
	//Function:
	//  CollectionFunction | Join | Length | DateFormat | Delete | Contains | DayDifference | CurrentDate | PickFirst | Extract | TranslateUnicode | AddToDate | UUIDFunc | LowerFunc | UpperFunc
	//;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//CollectionFunction:
	//  function=CollectionFunctionCall (=>'[' refexp=Expression ']')?('.'resultKey+=Key)*
	//;
	public CollectionFunctionElements getCollectionFunctionAccess() {
		return pCollectionFunction;
	}
	
	public ParserRule getCollectionFunctionRule() {
		return getCollectionFunctionAccess().getRule();
	}
	
	//CollectionFunctionCall:
	//  RemoveFunc | FindFirstFunc | FilterFunc | MapFunc | Split | Json | ConcatFunc | SortFunc | DedupFunc | LastFunc | ParentFunc
	//;
	public CollectionFunctionCallElements getCollectionFunctionCallAccess() {
		return pCollectionFunctionCall;
	}
	
	public ParserRule getCollectionFunctionCallRule() {
		return getCollectionFunctionCallAccess().getRule();
	}
	
	//ParentFunc:
	//    'parent(' exp=Expression ')'
	//;
	public ParentFuncElements getParentFuncAccess() {
		return pParentFunc;
	}
	
	public ParserRule getParentFuncRule() {
		return getParentFuncAccess().getRule();
	}
	
	//LastFunc:
	//    'last(' exp=Expression ')'
	//;
	public LastFuncElements getLastFuncAccess() {
		return pLastFunc;
	}
	
	public ParserRule getLastFuncRule() {
		return getLastFuncAccess().getRule();
	}
	
	//Delete:
	//  'delete(' variable = Variable ')'
	//;
	public DeleteElements getDeleteAccess() {
		return pDelete;
	}
	
	public ParserRule getDeleteRule() {
		return getDeleteAccess().getRule();
	}
	
	//Split:
	//  'split('exp=Expression','regex=STRING')'
	//;
	public SplitElements getSplitAccess() {
		return pSplit;
	}
	
	public ParserRule getSplitRule() {
		return getSplitAccess().getRule();
	}
	
	//Contains:
	//  'contains('input=Expression','search=Expression')'
	//;
	public ContainsElements getContainsAccess() {
		return pContains;
	}
	
	public ParserRule getContainsRule() {
		return getContainsAccess().getRule();
	}
	
	//Extract:
	//  'extract('input=Expression','range=Range')'
	//;
	public ExtractElements getExtractAccess() {
		return pExtract;
	}
	
	public ParserRule getExtractRule() {
		return getExtractAccess().getRule();
	}
	
	//DateFormat:
	//  'dateFormat' '(' from=('\"MM/dd/yyyy\"' | '\"yyyyMMdd\"' | '\"yyyy-MM-dd\"' | '\"ms\"' | STRING) ',' to=('\"MM/dd/yyyy\"' | '\"yyyyMMdd\"' | '\"yyyy-MM-dd\"' | '\"ms\"' | STRING) ',' exp=Expression ')'
	//;
	public DateFormatElements getDateFormatAccess() {
		return pDateFormat;
	}
	
	public ParserRule getDateFormatRule() {
		return getDateFormatAccess().getRule();
	}
	
	//AddToDate:
	//    'addToDate' '(' dateExp=Expression ',' format=('\"MM/dd/yyyy\"' | '\"yyyyMMdd\"' | '\"yyyy-MM-dd\"' | '\"ms\"' | STRING) ',' exp=Expression ',' type=('Days') ')'
	//;
	public AddToDateElements getAddToDateAccess() {
		return pAddToDate;
	}
	
	public ParserRule getAddToDateRule() {
		return getAddToDateAccess().getRule();
	}
	
	//FilterFunc:
	//  'filter('exp=Expression','condtion=BooleanExpression')'
	//;
	public FilterFuncElements getFilterFuncAccess() {
		return pFilterFunc;
	}
	
	public ParserRule getFilterFuncRule() {
		return getFilterFuncAccess().getRule();
	}
	
	//FindFirstFunc:
	//  'findFirst' '('exp=Expression',' condition=BooleanExpression')'
	//;
	public FindFirstFuncElements getFindFirstFuncAccess() {
		return pFindFirstFunc;
	}
	
	public ParserRule getFindFirstFuncRule() {
		return getFindFirstFuncAccess().getRule();
	}
	
	//RemoveFunc:
	//  'remove' '(' exp=Expression ',' condition=BooleanExpression')'
	//;
	public RemoveFuncElements getRemoveFuncAccess() {
		return pRemoveFunc;
	}
	
	public ParserRule getRemoveFuncRule() {
		return getRemoveFuncAccess().getRule();
	}
	
	//SortFunc:
	//  'sort('exp=Expression','key=SchemaVariable (','type=ORDER_TYPE)?')'
	//;
	public SortFuncElements getSortFuncAccess() {
		return pSortFunc;
	}
	
	public ParserRule getSortFuncRule() {
		return getSortFuncAccess().getRule();
	}
	
	//DedupFunc:
	//  'dedup('exp=Expression (','key=SchemaVariable)?')'
	//;
	public DedupFuncElements getDedupFuncAccess() {
		return pDedupFunc;
	}
	
	public ParserRule getDedupFuncRule() {
		return getDedupFuncAccess().getRule();
	}
	
	//ORDER_TYPE:
	//    'ascending' | 'descending'
	//;
	public ORDER_TYPEElements getORDER_TYPEAccess() {
		return pORDER_TYPE;
	}
	
	public ParserRule getORDER_TYPERule() {
		return getORDER_TYPEAccess().getRule();
	}
	
	//MapFunc:
	//  'map('exp=Expression ("{"range=Range"}")? ('as' aliasKey=AllowedKeyword)? '->'(returnexp=Expression | '{'
	//   ((statement+=MapStatement)+)
	//      '}')
	//  ')'
	//;
	public MapFuncElements getMapFuncAccess() {
		return pMapFunc;
	}
	
	public ParserRule getMapFuncRule() {
		return getMapFuncAccess().getRule();
	}
	
	//Range:
	//  (low=Expression)? diff=".." (high=Expression)?
	//;
	public RangeElements getRangeAccess() {
		return pRange;
	}
	
	public ParserRule getRangeRule() {
		return getRangeAccess().getRule();
	}
	
	//MapStatement:
	//  resultKey+=Key('.'resultKey+=Key)* '=' exp=Expression
	//;
	public MapStatementElements getMapStatementAccess() {
		return pMapStatement;
	}
	
	public ParserRule getMapStatementRule() {
		return getMapStatementAccess().getRule();
	}
	
	//ConcatFunc:
	//  'concat('exp+=Expression (','exp+=Expression)+ ')'
	//;
	public ConcatFuncElements getConcatFuncAccess() {
		return pConcatFunc;
	}
	
	public ParserRule getConcatFuncRule() {
		return getConcatFuncAccess().getRule();
	}
	
	//Length:
	//  'length('exp=Expression')'
	//;
	public LengthElements getLengthAccess() {
		return pLength;
	}
	
	public ParserRule getLengthRule() {
		return getLengthAccess().getRule();
	}
	
	//LowerFunc:
	//    'lowerCase('exp=Expression')'
	//;
	public LowerFuncElements getLowerFuncAccess() {
		return pLowerFunc;
	}
	
	public ParserRule getLowerFuncRule() {
		return getLowerFuncAccess().getRule();
	}
	
	//UpperFunc:
	//    'upperCase('exp=Expression')'
	//;
	public UpperFuncElements getUpperFuncAccess() {
		return pUpperFunc;
	}
	
	public ParserRule getUpperFuncRule() {
		return getUpperFuncAccess().getRule();
	}
	
	//UUIDFunc:{UUIDFunc}
	//    'uuid()'
	//;
	public UUIDFuncElements getUUIDFuncAccess() {
		return pUUIDFunc;
	}
	
	public ParserRule getUUIDFuncRule() {
		return getUUIDFuncAccess().getRule();
	}
	
	//Json:
	//  'json('exp=SchemaVariable')'
	//;
	public JsonElements getJsonAccess() {
		return pJson;
	}
	
	public ParserRule getJsonRule() {
		return getJsonAccess().getRule();
	}
	
	//Join:
	//    /**
	//     * Breaking change to make the `key` parameter non-optional
	//     */
	//  'join('exp=Expression ',' key=Expression ',' delimiter=STRING(','last=STRING)? ')'
	//;
	public JoinElements getJoinAccess() {
		return pJoin;
	}
	
	public ParserRule getJoinRule() {
		return getJoinAccess().getRule();
	}
	
	//DayDifference:
	//  'dayDifference('from=Expression','to=Expression',' formatter=('\"MM/dd/yyyy\"' | '\"yyyyMMdd\"' | '\"yyyy-MM-dd\"') ')'
	//;
	public DayDifferenceElements getDayDifferenceAccess() {
		return pDayDifference;
	}
	
	public ParserRule getDayDifferenceRule() {
		return getDayDifferenceAccess().getRule();
	}
	
	//TranslateUnicode:
	//    'translateUnicode('exp=Expression')'
	//;
	public TranslateUnicodeElements getTranslateUnicodeAccess() {
		return pTranslateUnicode;
	}
	
	public ParserRule getTranslateUnicodeRule() {
		return getTranslateUnicodeAccess().getRule();
	}
	
	//CurrentDate:
	//    {CurrentDate} 'currentDate('format=('\"MM/dd/yyyy\"' | '\"yyyyMMdd\"' | '\"yyyy-MM-dd\"' | '\"ms\"' | STRING)?')'
	//;
	public CurrentDateElements getCurrentDateAccess() {
		return pCurrentDate;
	}
	
	public ParserRule getCurrentDateRule() {
		return getCurrentDateAccess().getRule();
	}
	
	//PickFirst:
	//  'pickFirst('exp+=Expression (','exp+=Expression)+ '->' condition=Comparison ')'
	//;
	public PickFirstElements getPickFirstAccess() {
		return pPickFirst;
	}
	
	public ParserRule getPickFirstRule() {
		return getPickFirstAccess().getRule();
	}
	
	//Variable:
	//  schemaVariable=SchemaVariable
	//;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Key:
	//  id=AllowedKeyword(=>'['exp=Expression']')?
	//;
	public KeyElements getKeyAccess() {
		return pKey;
	}
	
	public ParserRule getKeyRule() {
		return getKeyAccess().getRule();
	}
	
	//SchemaVariable:
	//  (global='::')?key+=Key('.'key+=Key)*
	//;
	public SchemaVariableElements getSchemaVariableAccess() {
		return pSchemaVariable;
	}
	
	public ParserRule getSchemaVariableRule() {
		return getSchemaVariableAccess().getRule();
	}
	
	//Property:
	//  '@Config('key=STRING')'
	//;
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}
	
	//AllowedKeyword: ID | 'length' | 'filter' | 'delete' | 'path' | 'it' | 'field' | 'default' | 'template' | 'uuid' | 'parent' | 'json'
	//    | 'join' | 'translateUnicode' | 'upperCase' | 'lowerCase' | 'concat'
	//;
	public AllowedKeywordElements getAllowedKeywordAccess() {
		return pAllowedKeyword;
	}
	
	public ParserRule getAllowedKeywordRule() {
		return getAllowedKeywordAccess().getRule();
	}
	
	//NUMBER returns ecore::EBigDecimal:
	//  INT | (INT '.' INT)
	//;
	public NUMBERElements getNUMBERAccess() {
		return pNUMBER;
	}
	
	public ParserRule getNUMBERRule() {
		return getNUMBERAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
